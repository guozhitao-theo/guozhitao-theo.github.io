<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>V8工作原理</title>
      <link href="2022/03/03/v8-gong-zuo-yuan-li/"/>
      <url>2022/03/03/v8-gong-zuo-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="V8工作原理"><a href="#V8工作原理" class="headerlink" title="V8工作原理"></a>V8工作原理</h1><h2 id="JavaScript内存机制"><a href="#JavaScript内存机制" class="headerlink" title="JavaScript内存机制"></a>JavaScript内存机制</h2><h3 id="JavaScript-是什么类型的语言"><a href="#JavaScript-是什么类型的语言" class="headerlink" title="JavaScript 是什么类型的语言"></a>JavaScript 是什么类型的语言</h3><p>javaScript是一种若类型的、动态的语言。</p><ul><li><strong>弱类型</strong>，意味着你不需要告诉JavaScript引擎这个或那个变量是什么数据类型，JavaScript引擎在运行代码的时候自己会计算出来。</li><li><strong>动态</strong>，意味着你可以使用同一个变量保存不同类型的数据。</li></ul><h3 id="JavaScript的数据类型"><a href="#JavaScript的数据类型" class="headerlink" title="JavaScript的数据类型"></a>JavaScript的数据类型</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Boolean</td><td>只有true和false两个值</td></tr><tr><td>Null</td><td>只有一个值null</td></tr><tr><td>Undefined</td><td>一个没有被赋值的变量会有个默认值undefinde，变量提升时的默认值也是undefined</td></tr><tr><td>Number</td><td>根据ECMAScript标准，JavaScript中只有一种数字类型：基于IEEE754标准的双精度64位二进制格式的值，（-263-1）到263-1</td></tr><tr><td>BigInt</td><td>javaScript中一个新的数字类型，可以用任意精度标识整数，使用BigInt，即使超出Number的安全整数范围限制，也可以安全地存储和操作。</td></tr><tr><td>String</td><td>用于表示文本数据。不同于类C语言，JavaScript的字符串时不可更改的</td></tr><tr><td>Symbol</td><td>符号类型时唯一的并且时不可修改的，通常用来作为Object的key.</td></tr><tr><td>Object</td><td>在JavaScript里，对象可以被看作是一组属性的集合</td></tr></tbody></table><ul><li>使用typeof检测Null类型时，返回的是Object。</li><li>Object类型特殊，是包含了key-value对的数据类型。</li><li>前七中数据类型称为原始类型，对象类型被称为引用类型。</li></ul><h3 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h3><p>在javaScript的执行过程中，主要有三种类型内存空间，分别是<strong>代码空间、栈空间、堆空间</strong>。</p><h4 id="栈空间和堆空间"><a href="#栈空间和堆空间" class="headerlink" title="栈空间和堆空间"></a>栈空间和堆空间</h4><p>栈空间就是调用栈，用来存储执行上下文的。</p><p>当执行一段代码时，需要先编译，并创建执行上下文，然后按照顺序执行代码。</p><p>赋值的时候javaScript引擎判断右边的值是什么类型</p><ul><li><p>如果是原属类型，直接将值保存在执行上下文中的变量环境，而执行上下文又被压入到栈中，所以变量的值存放在栈中。</p></li><li><p>如果是引用类型，javaScript引擎并不是直接将该对象存放到变量环境中，而是将它分配到堆空间里面，分配后该对象会有一个“堆”中的地址，然后在将该数据的地址写进变量的值。</p><p>对象类型是存放在堆空间的，在栈空间中只是保留了对象的引用地址，当JavaScript需要访问该数据的时候，通过栈中的引用地址来访问的。</p></li></ul><h4 id="为什么要分成栈和堆两个存储空间呢"><a href="#为什么要分成栈和堆两个存储空间呢" class="headerlink" title="为什么要分成栈和堆两个存储空间呢"></a>为什么要分成栈和堆两个存储空间呢</h4><p>JavaScript引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间大了话，所有的数据都存放在栈空间里面，会影响到上下文切换的效率，进而又影响到整个程序的执行效率。</p><p>通常情况下，<strong>栈空间都不会设置太大，主要用来存放一些原始类型的小数据</strong>。而引用类型的数据占用的空间都比较大，所以这一类数据会被存放到堆中，<strong>堆空间很大，能存放很多大的数据</strong>，不过分配内存和回收内存都会占用一定的时间。</p><p><strong>原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址。</strong></p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><ol><li>当JavaScript引擎执行到闭包函数的时候，首先会编译，并创建一个空执行上下文。</li><li>在编译过程中，遇到内部函数setName，JavaScript引擎还要堆内部函数做一次快速的词法扫描，发现该内部函数引用了闭包函数中的变量，由于是内部函数引用了外部函数的变量，所以JavaScript引擎判断这是一个闭包，于是在堆空间创建一个<code>closure()</code>的对象（这是一个内部对象，JavaScript是无法访问的），用来保存变量。</li><li>接着继续扫描到其他内部方法的时候，若是这个方法内部还引用了闭包函数的变量，于是JavaScript引擎又将该变量添加到“closure(foo)”对象中。这个时候堆中的“<code>closure()对象</code>”中就包含了变量。</li><li>调用闭包内部函数的时候，创建的执行上下文的变量环境中就包含了<code>closure</code></li></ol><p>产生闭包的核心有两步：</p><pre><code> 1. 需要预扫描内部函数； 2. 把内部函数引用的外部变量保存到堆中。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue如何跑起来的</title>
      <link href="2022/03/02/vue-ru-he-pao-qi-lai-de/"/>
      <url>2022/03/02/vue-ru-he-pao-qi-lai-de/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue如何跑起来的"><a href="#Vue如何跑起来的" class="headerlink" title="Vue如何跑起来的"></a>Vue如何跑起来的</h1><h2 id="入口文件说明"><a href="#入口文件说明" class="headerlink" title="入口文件说明"></a>入口文件说明</h2><p>在vue3的入口文件<code>main.js</code>中 能看到与一下代码相似的代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入 createApp </span><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">// 引用Element3 第三方库</span><span class="token keyword">import</span> Element3 <span class="token keyword">from</span> <span class="token string">'element3'</span><span class="token comment" spellcheck="true">// 引用Element3 第三方库样式</span><span class="token keyword">import</span> <span class="token string">'element3/lib/theme-chalk/index.css'</span><span class="token comment" spellcheck="true">// 引用Vue 根组件</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token comment" spellcheck="true">// 引入 路由</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router/index'</span><span class="token comment" spellcheck="true">// 引入 vuex</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store/index'</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Element3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h2 id="简单的实现createApp"><a href="#简单的实现createApp" class="headerlink" title="简单的实现createApp"></a>简单的实现createApp</h2><p>​        返推倒回去，知道<code>createApp()</code>传入一个<code>component</code> 返回的一个对象，对象中包含<code>use</code>，<code>mount</code>等方法。</p><p>​        vue的项目都是从一个根组件搭起来的，入口文件先将vue的根组件挂载上，然后再实际的节点中挂载到对应的节点上。</p><h3 id="vue-的执行流程"><a href="#vue-的执行流程" class="headerlink" title="vue 的执行流程"></a>vue 的执行流程</h3><ol><li>入口文件<code>createApp</code> 调用，创建渲染器（<code>runtime-dom</code>）</li><li>创建渲染器的时候将实际的客户端对节点的操作传入由<code>vue</code>渲染成为<code>html</code>节点.<ul><li>这一点vue能够实现跨端原因。</li></ul></li><li>渲染器要做两件事：<ol><li><code>render</code> 渲染器完成渲染动作（创建虚拟节点，patch, 节点刷新）</li><li>将vue上的方法和配置挂载到对应的实例上（use, component, provide, directive, mount: mount的时候调用<code>render</code> 完成渲染）</li></ol></li></ol><pre class=" language-javascript"><code class="language-javascript">   <span class="token comment" spellcheck="true">// 返回一个包含createApp 的对象</span>   <span class="token keyword">function</span> ensureRenderer <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>           <span class="token comment" spellcheck="true">// createRenderer(nodeOps) 的返回值是一个创建vue实例的方法</span>           render <span class="token operator">||</span> <span class="token punctuation">(</span>render <span class="token operator">=</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span>nodeOps<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 创建app的方法</span>   <span class="token keyword">export</span> <span class="token keyword">const</span> createApp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 创建渲染器方法</span>   <span class="token keyword">function</span> createRenderer <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 组件渲染动作 创建虚拟节点，patch算法, 节点刷新</span>       <span class="token keyword">function</span> render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 创建vue组件api，并在其中调用渲染</span>           createApp<span class="token punctuation">:</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 创建vue组件api</span>   <span class="token keyword">let</span> uid <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 全局唯一标识 每次创建一个实例 加一</span>   <span class="token comment" spellcheck="true">/**    * @description 创建vue组件 内部api的方法    * @returns 创建Vue App的方法    */</span>   <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span>rootComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 上下文对象 -- 随便写几个意思一下</span>           <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>               provides<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               directives<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               plugins<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 插件去重其他可被覆盖</span>               mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>           <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 实例上的数据和方法</span>           <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">{</span>               _uid<span class="token punctuation">:</span> uid<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 每个vue组件的唯一标识</span>               _context<span class="token punctuation">:</span> context<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 组件的上下文</span>               mount <span class="token punctuation">(</span>rootContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">// 节点挂在</span>                   <span class="token comment" spellcheck="true">/**                    * 1. 创建虚拟节点                    * 2. 给虚拟节点挂载context                    * 3. 节点渲染                    */</span>                   <span class="token comment" spellcheck="true">// 调用 render函数</span>                   <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>rootComponent<span class="token punctuation">)</span>                   vnode<span class="token punctuation">.</span>appContext <span class="token operator">=</span> context                   <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rootContainer<span class="token punctuation">)</span>                   <span class="token keyword">return</span> app               <span class="token punctuation">}</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">// 插件注册</span>               <span class="token function">use</span><span class="token punctuation">(</span>plugins<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">/**                    * 1. 判断插件是否已经存在                    * 2. 不存在则添加插件                    * 3. 调用插件的install 方法 完成注册                    */</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       context<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>                       plugins<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token operator">...</span>options<span class="token punctuation">)</span>                   <span class="token punctuation">}</span>                   <span class="token keyword">return</span> app               <span class="token punctuation">}</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">// 简单的数据存储</span>               provide <span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">// 将数据存储到 context 中</span>                   context<span class="token punctuation">.</span>provides<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val                   <span class="token keyword">return</span> app               <span class="token punctuation">}</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">// 组件注册</span>               <span class="token function">component</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">// 注册的组件存储在context 上</span>                   context<span class="token punctuation">.</span>components<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> component                   <span class="token keyword">return</span> app               <span class="token punctuation">}</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">// ... 其他的类似</span>           <span class="token punctuation">}</span>           <span class="token keyword">return</span> app       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 创建虚拟节点</span>   <span class="token keyword">function</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> vnode <span class="token operator">=</span> <span class="token keyword">null</span>     <span class="token keyword">return</span> vnode   <span class="token punctuation">}</span></code></pre><h3 id="render-渲染"><a href="#render-渲染" class="headerlink" title="render 渲染"></a>render 渲染</h3><p><code>render(vnode, container)</code> 接受两个参数，<code>vnode</code> 是新的虚拟节点， <code>container</code>是需要更新的组件的“上下文”</p><p>vue重点就是虚拟节点渲染的时候中间的patch 环节。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 虚拟节点渲染函数</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取旧的节点</span>    <span class="token keyword">const</span> prevVNode <span class="token operator">=</span> container<span class="token punctuation">.</span>_vnode        <span class="token comment" spellcheck="true">// 如果新的节点是null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果上一个节点存在的话</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>preVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unmount</span><span class="token punctuation">(</span>preVNode<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 传递vnode是null，直接全部卸载</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果新的节点存在 调用patch</span>      <span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    container<span class="token punctuation">.</span>_vnode <span class="token operator">=</span> vnode <span class="token comment" spellcheck="true">// 缓存vnode，作为下次render的prev</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 虚拟Dom 核心 咱先只考虑 入口文件</span><span class="token keyword">function</span> patch <span class="token punctuation">(</span>oldNode<span class="token punctuation">,</span> newNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 新老虚拟Dom对比 处理</span>  <span class="token comment" spellcheck="true">// 暂时不管其他情况 先处理组件类型</span>  <span class="token function">processComponent</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">,</span> newNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//处理组件</span><span class="token keyword">function</span> <span class="token function">processComponent</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">,</span> newNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果不存在旧的虚拟节点则直接挂载新的节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化 component</span>    <span class="token function">mountComponent</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 组件更新</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//挂载组件</span><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 创建组件实例，其实就是个对象，包含组件的各种属性</span>  <span class="token keyword">const</span> instance <span class="token operator">=</span> vnode<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token punctuation">{</span>    vnode<span class="token punctuation">,</span>    type<span class="token punctuation">:</span>vnode<span class="token punctuation">.</span>type<span class="token punctuation">,</span>    props<span class="token punctuation">:</span>vnode<span class="token punctuation">.</span>props<span class="token punctuation">,</span>    setupState<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//响应式状态</span>    slots<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    ctx<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    emit<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 启动setup函数中的各种响应式数据 并且将模板渲染成html --- 至此 页面渲染完成</span>  <span class="token function">setupComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 组件中setup中的 effect 执行之后就触发响应式数据更新</span>  <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>至此 页面渲染完成。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue响应式原理</title>
      <link href="2022/03/02/vue-xiang-ying-shi-yuan-li/"/>
      <url>2022/03/02/vue-xiang-ying-shi-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="VUE-响应式原理"><a href="#VUE-响应式原理" class="headerlink" title="VUE 响应式原理"></a>VUE 响应式原理</h1><h2 id="核心：proxy、effact"><a href="#核心：proxy、effact" class="headerlink" title="核心：proxy、effact"></a>核心：proxy、effact</h2><h3 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// proxy 浅层代理</span><span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`proxy -- target: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> property: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  get: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`proxy target: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> property: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -- set: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token punctuation">{</span>    c<span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> objProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">const</span> arrProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> handler<span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 使用递归深层代理vue</span><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> val <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token keyword">function</span> myProxy <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`proxy -- target: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> property: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  get: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 判断获取的值是否是对象，如果是对象也要让它的get 和 set 也被拦截</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">myProxy</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> res    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`proxy target: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> property: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -- set: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> res    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="effect（观察者）"><a href="#effect（观察者）" class="headerlink" title="effect（观察者）"></a>effect（观察者）</h3><p>作用：</p><ol><li>生成依赖的标志-通过全局变量和回调函数的方式获取需要保存的依赖<ul><li>将回调函数保存到全局变量中，当触发响应式数据的get 方法的时候和 将该回调保存到 <strong>依赖集合</strong></li><li>使用回调函数的方式目的时候方便，响应式数据更改触发set方法时，将依赖集合中的 方法重新触发一遍 使数据更新。</li></ul></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// effect 通过队列管理</span>    <span class="token keyword">const</span> effectFn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            activeEffect <span class="token operator">=</span> effectFn            <span class="token comment" spellcheck="true">// fn 执行的时候，内部读取响应式数据的时候，就能在get配置里读取到activeEffect</span>            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            activeEffect <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 立即调用更新（实际会有调度控制）</span>    <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>使用一个单元测试示例说明：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 生成proxy代理过的数据-响应式数据</span><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 副作用函数，触发更新</span><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 测试</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'测试响应式'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'reactive基本使用'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> num<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> val        <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> ret<span class="token punctuation">.</span>num        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        ret<span class="token punctuation">.</span>num<span class="token operator">++</span>        <span class="token function">expect</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        ret<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">10</span>        <span class="token function">expect</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>以上代码执行步骤</p><pre><code>1. 创建对象的响应式数据`ret`。 2. 调用effect 函数传入回调函数，此时内部使用了`ret` 会触发`reactive` 函数中 `get` 收集依赖。 3. 收集的依赖 类似`{dep: () =&gt; {val = ret.num}}`（简单举个例子，实际并非这样）。 4. 当执行`ret.num++` 时候 触发 `set`方法， `ret.num =ret.num + 1 ` 触发依赖集合中的方法。 5. 此时 `dep` 方法被调用, `val = ret.num` 又执行一次， `val`的值就变成了 + 1 的值。 6. `ret.num = 10` 同理</code></pre><h2 id="依赖收集-怎么存依赖、怎么收集"><a href="#依赖收集-怎么存依赖、怎么收集" class="headerlink" title="依赖收集 - 怎么存依赖、怎么收集"></a>依赖收集 - 怎么存依赖、怎么收集</h2><h3 id="怎么存依赖"><a href="#怎么存依赖" class="headerlink" title="怎么存依赖"></a>怎么存依赖</h3><ol><li>全局保存一个<code>weakMap</code>。</li><li>将响应式数据对象作为 <code>weakMap</code>的键，一个<code>Map</code> 作为值。</li><li>在<code>Map</code> 中，将响应式数据对象的 属性（property） 作为键， <code>Set</code> 作为值。</li><li>当某一个响应式数据被使用的时候，将<code>effect</code> 中的回调函数通过全局变量获取到之后 保存到 <code>Set</code> 之中。</li></ol><h3 id="怎么收集依赖"><a href="#怎么收集依赖" class="headerlink" title="怎么收集依赖"></a>怎么收集依赖</h3><p>在proxy 中的get方法被触发的时候调用<code>track</code> 方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 依赖收集</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`触发 track -> target: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 基于target找到对应的dep</span>    <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果是第一次，需要初始化依赖项</span>        targetMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 找到当前响应式对象key所有的依赖集合（Set）</span>    <span class="token keyword">let</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若不存在则初始化</span>        deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 全局变量-用于保存依赖</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 防止重复注册- 如果activeEffect 存在并且 依赖集合中不存在则注册依赖</span>        deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 依赖集合更新</span>    depsMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> deps<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="依赖触发更新"><a href="#依赖触发更新" class="headerlink" title="依赖触发更新"></a>依赖触发更新</h2><ol><li>响应式数据对象<code>set</code>方法被调用的时候，触发依赖更新-（将依赖集合中的方法全执行一遍）。</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> trigger <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 从全局变量中找到依赖</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 找到对应 属性的 依赖Set</span>  <span class="token keyword">let</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 遍历Set</span>  deps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>effectFn <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用effect 方法更新数据</span>      <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>1.<a href="https://es6.ruanyifeng.com/#README">ES6</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ref,computed</title>
      <link href="2022/03/02/ref-computed/"/>
      <url>2022/03/02/ref-computed/</url>
      
        <content type="html"><![CDATA[<h2 id="ref-函数"><a href="#ref-函数" class="headerlink" title="ref 函数"></a>ref 函数</h2><p>原理：<code>ref</code>使用的时候都是使用<code>.value</code> 。 实际上在<code>reactive</code> 的基础上<code>ref</code> 比较简单。ref是对value 属性的 拦截实现的，如果是引用类型则使用<code>reactive</code>。</p><h3 id="jest"><a href="#jest" class="headerlink" title="jest"></a>jest</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../ref'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>effect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../effect'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'ref测试响应式'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'ref 基本类型'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建响应式数据</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> val    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      val <span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    val<span class="token punctuation">.</span>value<span class="token operator">++</span>    <span class="token function">expect</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    val<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">10</span>    <span class="token function">expect</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'ref 引用类型'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建引用响应式数据</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> val<span class="token punctuation">,</span>val1    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      val <span class="token operator">=</span> value<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      val1 <span class="token operator">=</span> value<span class="token punctuation">.</span>value<span class="token punctuation">.</span>a    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    val<span class="token punctuation">.</span>a<span class="token operator">++</span>    <span class="token function">expect</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    val<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span>    <span class="token function">expect</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'ref 引用类型 Ref实例'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span>    <span class="token keyword">let</span> val<span class="token punctuation">,</span>val1    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      val <span class="token operator">=</span> value<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      val1 <span class="token operator">=</span> value<span class="token punctuation">.</span>value<span class="token punctuation">.</span>a    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    val<span class="token punctuation">.</span>a<span class="token operator">++</span>    <span class="token function">expect</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    val<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span>    <span class="token function">expect</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="ref-实现"><a href="#ref-实现" class="headerlink" title="ref 实现"></a>ref 实现</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> isObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../utils'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./reactive'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> track<span class="token punctuation">,</span> trigger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./effect'</span><span class="token keyword">export</span> <span class="token keyword">function</span> ref <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 不用拦截所有的对象中的属性，只需要拦截value</span>  <span class="token comment" spellcheck="true">// 判断这个值是否是RefImpl实例</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>__ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">RefImpl</span> <span class="token punctuation">{</span>    constructor <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>__ref <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token comment" spellcheck="true">// 判断value是引用类型则返回响应式数据</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_val <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 拦截value 属性</span>    <span class="token keyword">get</span> value <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 依赖收集</span>      <span class="token function">track</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_val    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 拦截set属性</span>    <span class="token keyword">set</span> value <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 判断当前的值是否有更改</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_val <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更改之后要将当前的_val 改成响应式</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_val <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 触发依赖</span>        <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_val    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 返回实例</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RefImpl</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 引用对象返回 reactive处理之后的响应式数据</span><span class="token keyword">function</span> convert <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">:</span> val<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 判断是否是引用对象</span><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> val <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">}</span></code></pre><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>​        当我们使用<code>computed</code> 的时候 实际上会返回一个响应式的值。而<code>computed</code> 的值要变成响应式要求函数，或者对象的get和set 中的代码，至少有一个响应式数据，因为这样才能触发<code>effect()</code> 函数调用来产生副作用。所以<code>computed</code>的返回值也应该是<code>effect</code> 函数产生的副作用生成的值。</p><p>​        想一想 <code>effect</code> 函数在什么时候调用的呢？在响应式数据触发<code>get</code>的时候, 主动的去触发执行 <code>effect</code> 的函数参数 从而实现数据更新。所以在实现 <code>computed</code> 的时候至少有两个点要实现：</p><blockquote><ol><li><code>computed</code> 的返回值是响应式的，也就是说<code>computed</code> 的返回值使用的时候是要通过 <code>get</code> 函数 触发执行 <code>effect</code> 实现响应式。</li><li><code>computed</code> 函数参数中的响应式数据必须要被<code>effect</code>函数包裹起来。这样才能触发数据更改。</li></ol></blockquote><p>​        倒着推回去看，<code>computed</code> 函数的参数是一个<code>function</code> 或者 一个 包含<code>get</code> 、<code>set</code> 方法的对象。这一点非常巧妙的就实现了前面两点。</p><ul><li><p>如果数<code>function</code> 刚好作为 <code>getter</code> 将计算结果作为<code>computed</code>的返回值， 并根据上面的第2点，将包含响应式的数据放在<code>effect</code> 函数中。</p><p>如此之后有一个问题：之前的<code>effect</code>函数都是立即执行的，这样我们怎么去拿到计算结果呢？并作为<code>computed</code> 的返回值呢。</p><p>为了解决这个问题，将<code>effect</code> 的调用时机进行可调控的，让它在<code>computed</code> 的 <code>get</code> 函数触发的时候调用就可以了。</p></li><li><p>如果作为对象传入的话，也一样，只是多了一个<code>set</code> 函数。调用<code>set</code> 的时候<code>computed</code> 需要将所收集的依赖进行更新(就是 调用一次<code>effect</code>方法)才能使数据响应变化。</p></li></ul><h3 id="jest-模拟调用"><a href="#jest-模拟调用" class="headerlink" title="jest 模拟调用"></a>jest 模拟调用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// computed 单元测试</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../ref'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../reactive'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>computed<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../computed'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'computed测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'computed 基本使用'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建响应式对象</span>    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 调用computed 传入一个 function</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num<span class="token punctuation">.</span>value <span class="token operator">+</span> ret<span class="token punctuation">.</span>count<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 判断返回值是否符合预期</span>    <span class="token function">expect</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    ret<span class="token punctuation">.</span>count <span class="token operator">++</span>    <span class="token function">expect</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    num<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">10</span>    <span class="token function">expect</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>    sum<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'computed 对象基本使用'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> author <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'三国'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 调用computed 传入一个 包含get 属性和 set 属性的对象 </span>    <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> author<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> title<span class="token punctuation">.</span>value      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">set</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>author<span class="token punctuation">.</span>value<span class="token punctuation">,</span> title<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 判断返回值是否符合预期</span>    <span class="token function">expect</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'小明-三国'</span><span class="token punctuation">)</span>    author<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'小李'</span>    title<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'绿楼'</span>    <span class="token function">expect</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'小李-绿楼'</span><span class="token punctuation">)</span>    info<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'小红-东游'</span>    <span class="token function">expect</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'东游'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="computed实现"><a href="#computed实现" class="headerlink" title="computed实现"></a>computed实现</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> effect<span class="token punctuation">,</span> track <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./effect'</span><span class="token keyword">export</span> <span class="token keyword">function</span> computed <span class="token punctuation">(</span>getterOrOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// getterOrOptions 可以是函数，也可以是一个对象，支持get 和set</span>  <span class="token comment" spellcheck="true">// 当值是函数的时候不允许直接对其结果进行更改；当getterOrOptions是对象的时候通过get 和 set 进行设置</span>  <span class="token keyword">let</span> getter<span class="token punctuation">,</span>setter  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> getterOrOptions <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    getter <span class="token operator">=</span> getterOrOptions    setter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'计算属性不允许直接更改'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    getter <span class="token operator">=</span> getterOrOptions<span class="token punctuation">.</span><span class="token keyword">get</span>    setter <span class="token operator">=</span> getterOrOptions<span class="token punctuation">.</span><span class="token keyword">set</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComputedRefImpl</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> setter<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 拦截计算属性的 value</span><span class="token keyword">class</span> <span class="token class-name">ComputedRefImpl</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>getter<span class="token punctuation">,</span> setter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 实例化的时候直接将getter 使用effect 包住收集依赖，当里面的值变化的时候就直接触发</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token punctuation">{</span>lazy<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// effect调用的时候不调用回调函数，而是将它存起来，当触发get 的时候再调用</span>    <span class="token comment" spellcheck="true">// 保存setter</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_setter <span class="token operator">=</span> setter  <span class="token punctuation">}</span>  <span class="token keyword">get</span> value <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 依赖收集</span>    <span class="token function">track</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">set</span> value <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setter</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript设计模式</title>
      <link href="2022/03/02/javascript-she-ji-mo-shi/"/>
      <url>2022/03/02/javascript-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="javascript-设计模式"><a href="#javascript-设计模式" class="headerlink" title="javascript 设计模式"></a>javascript 设计模式</h1><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>​        概念：将创建对象的过程单独封装</p><p>​        场景：构造函数</p><p>​        构造器例子：员工信息生成</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span>name <span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token keyword">this</span><span class="token punctuation">.</span>career <span class="token operator">=</span> career <span class="token punctuation">}</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">)</span></code></pre><p>​        简单工厂例子：不同工种分配职责说明</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span>name <span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">,</span> work<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span>career <span class="token operator">=</span> career     <span class="token keyword">this</span><span class="token punctuation">.</span>work <span class="token operator">=</span> work<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Factory</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> work    <span class="token keyword">switch</span><span class="token punctuation">(</span>career<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'coder'</span><span class="token punctuation">:</span>            work <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">'写代码'</span><span class="token punctuation">,</span><span class="token string">'写系分'</span><span class="token punctuation">,</span> <span class="token string">'修Bug'</span><span class="token punctuation">]</span>             <span class="token keyword">break</span>        <span class="token keyword">case</span> <span class="token string">'product manager'</span><span class="token punctuation">:</span>            work <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'订会议室'</span><span class="token punctuation">,</span> <span class="token string">'写PRD'</span><span class="token punctuation">,</span> <span class="token string">'催更'</span><span class="token punctuation">]</span>            <span class="token keyword">break</span>        <span class="token keyword">case</span> <span class="token string">'boss'</span><span class="token punctuation">:</span>            work <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'喝茶'</span><span class="token punctuation">,</span> <span class="token string">'看报'</span><span class="token punctuation">,</span> <span class="token string">'见客户'</span><span class="token punctuation">]</span>        <span class="token keyword">case</span> <span class="token string">'xxx'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">// 其它工种的职责分配</span>            <span class="token operator">...</span>    <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">,</span> work<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">)</span></code></pre><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>开放封闭原则： 对扩展开放，对修改封闭。软件实体（类、模块、函数）可以扩展，但是不可以修改。</p><blockquote><p>创建一个手机生产流水线</p><ol><li>手机需要操作系统和硬件</li><li>操作系统- android 和 ios; 硬件系统-高通和小米</li></ol></blockquote><p>创建手机工厂</p><p>​        手机抽象工厂</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MobilePhoneFactory</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 提供操作系统的接口</span>  <span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"抽象工厂方法不允许直接调用，你需要将我重写！"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 提供硬件接口</span>  <span class="token function">createHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"抽象工厂方法不允许直接调用，你需要将我重写！"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        操作系统抽象工厂</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义操作系统这个类产品的抽象类</span><span class="token keyword">class</span> <span class="token class-name">OS</span> <span class="token punctuation">{</span>  <span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象产品方法不允许直接调用，你需要将我重写！'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        硬件系统抽象工厂</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义手机硬件这类产品的抽象产品类</span><span class="token keyword">class</span> <span class="token class-name">HardWare</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 手机硬件的共性方法</span>  <span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象产品方法不允许直接调用，你需要将我重写！'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>手机流水线必须先有具体的<strong>操作系统</strong>和<strong>硬件</strong></p><p>​        定义具体操作系统的具体产品类</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">AndroidOS</span> <span class="token keyword">extends</span> <span class="token class-name">OS</span> <span class="token punctuation">{</span>  <span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用安卓的方式去操作硬件'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AppleOS</span> <span class="token keyword">extends</span> <span class="token class-name">OS</span> <span class="token punctuation">{</span>  <span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用苹果的方式去操作硬件'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        定义具体硬件的具体产品类</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">QualcommHardWare</span> <span class="token keyword">extends</span> <span class="token class-name">HardWare</span> <span class="token punctuation">{</span>  <span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用高通的方式去运转'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MiWare</span> <span class="token keyword">extends</span> <span class="token class-name">HardWare</span> <span class="token punctuation">{</span>  <span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用小米的方式去运转'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>手机流水线具体类</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 某一类的手机 - 手机使用 安卓系统➕高通硬件</span><span class="token keyword">class</span> <span class="token class-name">FakeStartFactory</span> <span class="token keyword">extends</span> <span class="token class-name">MobilePhoneFactory</span> <span class="token punctuation">{</span>  <span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 提供安卓系统实例</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AndroidOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">createHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 提供高通硬件实例</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QualcommHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>生产手机的流程</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> myPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FakeStartFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 让他拥有操作系统</span><span class="token keyword">const</span> myOS <span class="token operator">=</span> myPhone<span class="token punctuation">.</span><span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 让他拥有硬件</span><span class="token keyword">const</span> myHardWare <span class="token operator">=</span> myPhone<span class="token punctuation">.</span><span class="token function">createHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 启动操作系统(输出‘我会用安卓的方式去操作硬件’)</span>myOS<span class="token punctuation">.</span><span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 唤醒硬件(输出‘我会用高通的方式去运转’)</span>myHardWare<span class="token punctuation">.</span><span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>假如有一天，FakeStar过气了，我们需要产出一款新机投入市场，这时候怎么办？我们是不是<strong>不需要对抽象工厂MobilePhoneFactory做任何修改</strong>，只需要拓展它的种类.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">newStarFactory</span> <span class="token keyword">extends</span> <span class="token class-name">MobilePhoneFactory</span> <span class="token punctuation">{</span>  <span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 操作系统实现代码</span>  <span class="token punctuation">}</span>  <span class="token function">createHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 硬件实现代码</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p><strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点</strong>。</p><p>构造函数实现单例模式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">SingleDog</span> <span class="token punctuation">{</span>  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是一个单例对象'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 创建静态方法获取 类的实例</span>  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断这个类是否已经存在实例</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>SingleDog<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 若是这个实例不存在，那先创建实例</span>      SingleDog<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> SingleDog<span class="token punctuation">.</span>instance  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> s1 <span class="token operator">=</span> SingleDog<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> s2 <span class="token operator">=</span> SingleDog<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// true</span>s1 <span class="token operator">===</span> s2</code></pre><p>闭包实现单例：外层被内存函数使用的变量会保存在内存中不会被销毁</p><pre class=" language-javascript"><code class="language-javascript">SingleDog<span class="token punctuation">.</span>getInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义自由变量instance</span>  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断自由变量是否为null</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果为null则new出的唯一实例</span>      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> instance  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>应用实例：vuex， 封装单实例方法，全局弹窗等…</p><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>在不改变原对象的基础上，通过对其进行包装拓展，使原有对象可以满足用户的更复杂需求</p><p>ES7 中的装饰器写法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 类装饰器</span><span class="token keyword">function</span> <span class="token function">classDecorator</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  target<span class="token punctuation">.</span>hasDecorator <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">return</span> target<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 类中的函数装饰器</span><span class="token keyword">function</span> <span class="token function">funcDecorator</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span>descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> originalMethod <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value  descriptor<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是Func的装饰器逻辑'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> originalMethod<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> descriptor<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将装饰器安装到类上</span>@classDecorator<span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>  @funcDecorator  <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是Func的原有逻辑'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 验证装饰器是否生效</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Button<span class="token punctuation">.</span>hasDecorator<span class="token punctuation">)</span>button<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>语法糖的背后</p><ol><li><p>函数传参</p><ol><li><p>类装饰器</p><p><code>target</code> 就是被装饰的类本身</p></li><li><p>类方法装饰器</p><p>target 变成了<code>Button.prototype</code>，即类的原型对象。类中的方法依附于实例，修饰方法就是修饰它的实例。但是装饰器函数执行的时候，类的实例还并不存在。为了确保实例生成后可以顺利调用被装饰好的方法，装饰器只能去修饰类的原型对象。</p></li></ol></li><li><p>将“属性描述对象”给装饰器</p><p>编写类装饰器时，一般一个<code>target</code> 参数就够了。但是在编写方法装饰器时，往往需要三个参数。</p><ul><li>target</li><li>name: 修饰的目标属性属性名</li><li>descriptor: 属性描述对象<ul><li>数据描述符：包括 value（存放属性值，默认为默认为 undefined）、writable（表示属性值是否可改变，默认为true）、enumerable（表示属性是否可枚举，默认为 true）、configurable（属性是否可配置，默认为true）。</li><li>存取描述符：包括 <code>get</code> 方法（访问属性时调用的方法，默认为 undefined），<code>set</code>（设置属性时调用的方法，默认为 undefined ）</li></ul></li></ul></li></ol><p>应用： React中的装饰器：HOC</p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p><strong>把一个类的接口变换成客户端所期待的另一种接口</strong>，可以帮我们解决<strong>不兼容</strong>的问题。</p><p>应用： axios请求-node环境和浏览器环境</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>在某些情况下，出于种种考虑/限制，一个对象<strong>不能直接访问</strong>另一个对象，需要一个<strong>第三者</strong>（代理）牵线搭桥从而间接达到访问目的。</p><p>ES6 Proxy</p><p>应用实践：</p><ol><li><p>事件代理</p><p>需求： 鼠标点击列表的时候都弹出弹窗</p><p>实现：</p><pre><code>1. 每个元素绑定点击事件2. 根据事件冒泡，给列表父元素绑定事件 再识别目标子元素（很大程度提高代码性能</code></pre></li><li><p>虚拟代理</p><p>图片预加载</p></li></ol><pre class=" language-javascript"><code class="language-javascript">   <span class="token keyword">class</span> <span class="token class-name">PreLoadImage</span> <span class="token punctuation">{</span>     <span class="token function">constructor</span><span class="token punctuation">(</span>imgNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 获取真实的DOM节点</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>imgNode <span class="token operator">=</span> imgNode     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 操作img节点的src属性</span>     <span class="token function">setSrc</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>imgNode<span class="token punctuation">.</span>src <span class="token operator">=</span> imgUrl     <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">class</span> <span class="token class-name">ProxyImage</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 占位图的url地址</span>     <span class="token keyword">static</span> LOADING_URL <span class="token operator">=</span> <span class="token string">'xxxxxx'</span>       <span class="token function">constructor</span><span class="token punctuation">(</span>targetImage<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 目标Image，即PreLoadImage实例</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>targetImage <span class="token operator">=</span> targetImage       <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 该方法主要操作虚拟Image，完成加载</span>       <span class="token function">setSrc</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 真实img节点初始化时展示的是一个占位图</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>targetImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span>ProxyImage<span class="token punctuation">.</span>LOADING_URL<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 创建一个帮我们加载图片的虚拟Image实例</span>       <span class="token keyword">const</span> virtualImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 监听目标图片加载的情况，完成时再将DOM上的真实img节点的src属性设置为目标图片的url</span>       virtualImage<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>targetImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span>       <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 设置src属性，虚拟Image实例开始加载图片</span>         virtualImage<span class="token punctuation">.</span>src <span class="token operator">=</span> targetUrl       <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>在这个实例中，<code>virtualImage</code> 这个对象是一个“幕后英雄”，它始终存在于 JavaScript 世界中、代替真实 DOM 发起了图片加载请求、完成了图片加载工作，却从未在渲染层面抛头露面。因此这种模式被称为“虚拟代理”模式。</p><ol start="3"><li><p>缓存代理</p><p>参数求和</p></li></ol><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// addAll方法会对你传入的所有参数做求和操作</span>    <span class="token keyword">const</span> addAll <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'进行了一次新计算'</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">const</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> result    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 为求和方法创建代理</span>    <span class="token keyword">const</span> proxyAddAll <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 求和结果的缓存池</span>      <span class="token keyword">const</span> resultCache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将入参转化为一个唯一的入参字符串</span>        <span class="token keyword">const</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 检查本次入参是否有对应的计算结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>args <span class="token keyword">in</span> resultCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 如果有，则返回缓存池里现成的结果</span>          <span class="token keyword">return</span> resultCache<span class="token punctuation">[</span>args<span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> resultCache<span class="token punctuation">[</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><blockquote><p>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p></blockquote><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><blockquote><p>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p></blockquote><blockquote><p>状态模式主要解决的是当控制一个对象状态的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类中，可以把复杂的判断逻辑简化。</p></blockquote><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><blockquote><p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。 —— Graphic Design Patterns</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从输入URL到页面展示发生了什么</title>
      <link href="2022/03/02/cong-shu-ru-url-dao-ye-mian-zhan-shi-fa-sheng-liao-shi-me/"/>
      <url>2022/03/02/cong-shu-ru-url-dao-ye-mian-zhan-shi-fa-sheng-liao-shi-me/</url>
      
        <content type="html"><![CDATA[<h1 id="从输入URL到页面展示，这中间发生了什么？-导航-amp-渲染"><a href="#从输入URL到页面展示，这中间发生了什么？-导航-amp-渲染" class="headerlink" title="从输入URL到页面展示，这中间发生了什么？- 导航&amp;渲染"></a>从输入URL到页面展示，这中间发生了什么？- 导航&amp;渲染</h1><h2 id="前置知识-各个进程的主要职责"><a href="#前置知识-各个进程的主要职责" class="headerlink" title="前置知识-各个进程的主要职责"></a>前置知识-各个进程的主要职责</h2><ul><li>浏览器进程主要负责用户交互、子进程管理和文件存储等功能。</li><li>网络进程是面向渲染进程和浏览器进程等提供网络下载功能。</li><li>渲染进程的主要职责是把从网络下载的HTML、JavaScript、CSS、图片等资源解析为可以显示和交互的页面。因为渲染进程所有的内容都是通过网络获取的，会存在一些恶意代码利用浏览器漏洞对系统进行攻击，所有运行在渲染进程里面的代码是不被信任的。所以Chrom 让渲染进程运行在安全沙箱里，就是为了保证系统的安全。</li></ul><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><h3 id="1-用户输入"><a href="#1-用户输入" class="headerlink" title="1. 用户输入"></a>1. 用户输入</h3><p>用户在浏览器地址栏输入查询关键字时，地址栏判断输入的关键字是搜索内容还是请求的URL.</p><ul><li>如果是搜索内容，地址栏使用浏览器默认搜索引擎，来合成新的带搜索关键字的URL。</li><li>如果判断输入内容符合URL规则，地址栏根据规则，合成为完整的URL。</li></ul><p>当用户输入关键字并回车之后，当前页面可以执行一次<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/beforeunload_event"> beforeunload</a>事件，beforeunload 事件允许页面在退出之前执行一些数据清理操作，还可以询问用户是否要离开当前页面，比如当前页面可能有未提交完成的表单等情况，因此用户可以通过 beforeunload 事件来取消导航，让浏览器不再执行任何后续工作。</p><h3 id="2-URL请求过程"><a href="#2-URL请求过程" class="headerlink" title="2. URL请求过程"></a>2. URL请求过程</h3><ol><li><p>浏览器进程通过进程间通信(IPC)把URL请求发送至网络进程。</p></li><li><p>网络进程查找本地缓存是否缓存了该资源？</p><ul><li>如果有缓存，直接返回资源给浏览器进程。</li><li>如果没有在缓存中找到资源，那么直接进入网络请求流程。</li></ul></li><li><p>网络请求流程如下：</p><ol><li><p>进行DNS解析，获取服务器ip地址(默认端口是80/443)。</p></li><li><p>如果协议是HTTPS，还需要建立TLS连接。</p></li><li><p>利用IP地址和服务器建立TCP连接。</p></li><li><p>构建请求行、请求头等信息，把和该域名相关的Cookie等数据附加到请求头中。</p></li><li><p>向服务器发送构建的请求信息。</p></li><li><p>服务器收到请求信息后，根据请求信息生成响应数据（包括响应行、响应头、响应体等信息），并发给浏览器网络进程。</p></li></ol></li><li><p>网络进程接收响应头和响应信息，并解析响应内容。解析响应流程：</p><ol><li>检查状态码，如果是301/302，则需要重定向，从响应头中Location字段合成完整的URL，<a href="#URL%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B">重新从URL请求过程的第2步执行。</a></li><li>200响应处理:</li></ol><ul><li>检查响应类型Content-Type，如果是<code>octet-stream</code> 字节流类型，则被判断为下载类型，请求会被提交给浏览器的下载管理器，同时该URL请求的导航流程结束。</li><li>如果是HTML（<code>text/html</code>）浏览器继续进行导航流程。</li></ul></li></ol><h3 id="3-准备渲染流程"><a href="#3-准备渲染流程" class="headerlink" title="3. 准备渲染流程"></a>3. 准备渲染流程</h3><ol><li>浏览器进程检查当前url是否和之前打开的渲染进程根域名相同，如果相同则服用原来的进程，如果不同，则开启新的渲染进程。</li><li>提交文档，浏览器进程将网络进程收到的HTML数据交给渲染进程，流程如下：<ol><li>当浏览器进程收到网络进程的响应头数据之后，便向渲染进程发起“提交文档”的消息；</li><li>渲染进程接收到“提交文档”的消息后，会和网络进程建立传输数据的“管道”；</li><li>等文档数据传输完成后，渲染进程会返回“确认提交”的消息给浏览器进程；</li><li>浏览器进程在收到“确认提交”的消息后，会更新浏览器界面状态，包括了安全状态、地址栏的URL、前进后退的历史状态，并更新Web页面。所以在浏览器的地址栏里面输入了一个地址后，之前的页面没有立马消失，而是要加载一会儿才会更新页面。</li><li>导航流程就“走”完了，这之后就要进入渲染阶段了。</li></ol></li></ol><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><h3 id="1-构建DOM树"><a href="#1-构建DOM树" class="headerlink" title="1. 构建DOM树"></a>1. 构建DOM树</h3><p>为什么要构建DOM树呢？因为浏览器无法直接理解和使用HTML，所以需要将HTML转换为浏览器能够理解的结构-DOM树。</p><p>构建DOM树的输入内容是一个非常简单的HTML文件，然后经由HTML解析器解析，最终输出树状结构的DOM。</p><h3 id="2-样式计算（Recalculate-Style）"><a href="#2-样式计算（Recalculate-Style）" class="headerlink" title="2. 样式计算（Recalculate Style）"></a>2. 样式计算（Recalculate Style）</h3><ol><li><p>把CSS转换为浏览器能够理解的结构。</p><p>CSS来源：</p><pre><code>* 通过`link`引入外部CSS文件* `&lt;style&gt;`标记内的CSS* 元素的style属性内嵌的CSS</code></pre><p>浏览器无法理解这些纯文本的CSS样式，所以当渲染引擎收到CSS文本时候，会将CSS文本转换为浏览器可以理解的结构–**<code>styleSheets</code>**。</p></li><li><p>转换样式表中的属性值，使其标准化</p><p>CSS文本中有很多属性值，例如2em、blue、bold，这些类型数值不容易被渲染引擎理解，所以需要将所有值转换为渲染引擎容易理解的、标准化的计算值。（2em -&gt; 32px; blue -&gt; rgba(0,0,255); bold-&gt;700）</p></li><li><p>计算出DOM树中每个几点的具体样式-CSS继承规则，层叠规则。</p><p>CSS继承规则：CSS继承就是每个DOM节点都包含有父节点的样式。</p><p>层叠规则：样式优先级、后面的样式覆盖前面的样式。</p></li></ol><h3 id="3-布局阶段"><a href="#3-布局阶段" class="headerlink" title="3. 布局阶段"></a>3. 布局阶段</h3><p>​    有了DOM树和DOM树中元素的样式，但这还不足以显示页面，因为我们还不知道DOM元素的几何位置信息。计算DOM树中可见元素的几何位置的过程叫做布局。</p><ol><li><p>创建布局树</p><ul><li>遍历DOM树中的所有可见节点，并把这些节点添加到布局树中。</li><li>而不可见的节点会被布局树忽略掉，如head标签下面的全部内容，以及属性包含<code>display: none</code>的元素</li></ul></li><li><p>布局计算</p></li><li><p>分层：因为页面中有很多复杂的效果，如一些复杂的3D变换、页面滚动，或者使用 z-indexing做z轴排序等，为了更加方便的实现这些效果，**渲染引擎还需要为特定的节点生成专用的图层，并生层一棵对应的图层树(layer Tree)**。</p><p>浏览器的页面实际上被分成了很多图层，这些图层叠加后合成最终页面。</p><p>并不是布局树的每个及诶单都包含一个图层，如果一个节点没有对应的层，那么这个几点就从属父节点的图层。</p><p>渲染引擎为节点创建新图层的条件：</p><ul><li><p>拥有层叠上下文属性的元素会被提升为单独的一层。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context">明确定位属性的元素、元素透明属性的元素、使用CSS滤镜的元素等都会被提升成单独的图层。</a></p></li><li><p>需要裁剪（clip）的地方也会被创建为图层<br>设置为overflow等裁剪会单独创建一个层，出现滚动条的时候，滚动条也会被单独提升为单独的层。</p></li></ul></li></ol><ol start="4"><li><p>图层绘制：</p><p>渲染引擎会把一个图层的绘制拆分成很多小的绘制指令，然后再把这些指令按照顺序组成一个带绘制列表。</p></li><li><p>栅格化（raster）操作</p><ol><li>绘制列表只是用来记录绘制顺序和绘制指令的列表，而实际上绘制操作是由渲染引擎中的合成线程来完成的。当图层的绘制列表准备好之后，<strong>主线程会把该绘制列表提交(commit)给合成线程</strong>。</li><li>为避免绘制出所有图层产生太大的开销，<strong>合成线程会将图层分为图块</strong>，这些图块的大小通常是256×256 或者 512×512。</li><li><strong>合成线程会按照视口附近的图块来优先生成位图，实际生成位图的操作是由栅格化来执行的。所谓栅格化，是指将图块转换为位图。</strong>通常，<strong>栅格化过程都会使用GPU来加速，渲染进程把生成图块的指令发送给GPU,然后在GPU中执行生成图块的位图，并保存在GPU的内存中，使用GPU生成位图的过程叫快速栅格化，或者GPU栅格化。</strong></li></ol></li><li><p>合成和显示</p><ol><li>一旦所有的图块都被光栅化，合成线程就会生成一个绘制图块的命令–“DrawQuad”，然后将该命令提交给浏览器进程。</li><li>浏览器进程里面有一个叫<code>viz</code>的组件，用来接收合成线程发过来的DrawQuad命令，然后根据DrawQuad命令，将其页面绘制到内存中，最后再将内存显示在屏幕上。</li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完整的从URL到页面展示流程：</p><ol><li>判断输入是搜索关键字还是URL，是关键字则合成带关键字的URL使用默认搜索引擎搜索，不是则合成URL。</li><li> 浏览器进程将合成URL通过进程间通信(IPC)发送给网络进程。</li><li>查找本地是否存在缓存，存在则拦截请求使用缓存资源，没有命中缓存则发送网络请求。</li><li>进行DNS解析获取目标服务器的ip地址。</li><li>利用ip地址和服务器建立tcp连接。</li><li>构建请求头，请求行等信息，并把相关Cookie等信息添加到请求头。</li><li>向服务器发送构建的请求信息。</li><li>服务器响应给浏览器网络进程。</li><li>网络进程检查状态码判断是否需要重定向。301，302要根据Location地址重新开始第3步。</li><li>状态码200的时候还要判断Content-Type，若是字节流则请求被提交给下载管理器，导航结束。</li><li>若Content-Type为html 则继续导航流程。</li><li>浏览器进程检查当前当前URL是否存在已经存在的根域名相同的渲染进程，若存在则打开就渲染进程。不存在则开启新的渲染进程。</li><li>浏览器进程收到网络进程的响应头数据之后，便向渲染进程发起“提交文档消息”。</li><li>渲染进程接收到“提交文档”的消息后，会和网络进程建立传输数据的“管道”。</li><li>等文档数据传输完成后，渲染进程会返回“确认提交”的消息给浏览器进程。</li><li>浏览器进程在收到“确认提交”的消息后，会更新浏览器界面状态，包括了安全状态、地址栏的URL、前进后退的历史状态，并更新Web页面。所以在浏览器的地址栏里面输入了一个地址后，之前的页面没有立马消失，而是要加载一会儿才会更新页面。</li><li>渲染进程将HTML内容转换为能够读懂的DOM树结构。</li><li>渲染引擎将CSS样式表转化为浏览器可以理解的<code>styleSheets</code>、计算出DOM节点的样式。</li><li>创建布局树，并计算元素的布局信息。</li><li>对布局树进行分层，并生成分层树。</li><li>为每个图层生成绘制列表，并将其提交到合并线程。</li><li>合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。</li><li>合成线程发送绘制图块命令<code>DrawQuad</code>给浏览进程。</li><li>浏览进程根据<code>DrawQuad</code>消息生成页面，并显示到显示器上。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行机制</title>
      <link href="2022/03/02/javascript-zhi-xing-ji-zhi/"/>
      <url>2022/03/02/javascript-zhi-xing-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-执行机制"><a href="#JavaScript-执行机制" class="headerlink" title="JavaScript 执行机制"></a>JavaScript 执行机制</h1><p>[TOC]</p><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>所谓的变量提升，是指在JavaScript代码执行过程中，javaScript引擎把变量的声明部分和函数的声明部分提升到代码开头的“行为”。变量被提升后，会给变量设置默认值<code>undefined</code>。<br>所以我们可以在定义之前使用变量或者函数。</p><h2 id="JavaScript代码执行流程"><a href="#JavaScript代码执行流程" class="headerlink" title="JavaScript代码执行流程"></a>JavaScript代码执行流程</h2><p>变量和函数声明在代码的位置是不会改变的，而且是在变异阶段被JavaScript引擎放在内存中。一段JavaScript代码在执行之前需要被JavaScript编译，编译完成之后，才会进入执行阶段。</p><h3 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h3><p>编译过程：生成执行上下文和可执行代码。</p><h4 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h4><p>执行上下文是JavaScript执行一段代码时的运行环境。执行上下文中存在一个变量环境的对象（Viriable Environment），该对象中保存了变量提升的内容。编译过程先把代码的声明部分存入对象中，如变量和函数（函数是在变量环境中创建一个属性，该属性指向堆中函数所在的位置）。</p><p><strong>一般来说创建执行上下文有三种情况：</strong></p><ol><li> 当JavaScript执行全局代码的时候，会编译全局代码并创建全局执行上下文，而且在整个页面周期内，执行上下文只有一份。</li><li> 当调用一个函数的时候，函数体内的代码会被编译，并创建函数执行上下文，一般情况下，函数执行结束之后，创建的函数执行上下文会被销毁。</li><li> 当使用eval函数的时候，eval的代码也会被编译，并创建执行上下文。</li></ol><h4 id="可执行代码"><a href="#可执行代码" class="headerlink" title="可执行代码"></a>可执行代码</h4><p>JavaScript引擎会把声明之外的代码编译为字节码。</p><h3 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h3><ul><li>当执行到函数的时候，JavaScripty引擎便开始在变量环境对象中查找该函数，由于变量环境中存在该函数的引用，所以JavaScript引擎便开始执行该函数</li><li>当执行到变量的时候，JavaScript引擎继续在变量环境对象中查找该对象，如果存在则继续执行，不存在则<code>not define</code></li></ul><p>代码出现相同的变量或者函数的时候，后面的覆盖前面的。</p><h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><p>调用栈是用来管理函数调用关系的一种数据结构。</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">function</span> add <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>函数调用过程：</p><ol><li>在执行到函数<code>add</code>之前，JavaScript 引擎会为上面这点代码创建全局执行上下文，包含了声明的函数和变量。</li><li>执行上下文准备好之后，便开始执行全局代码，当执行到add这，JavaScript判断这个是一个函数调用，就会执行一下操作：<ol><li>从全局执行上下文中，取出add函数代码。</li><li>对add函数的这段代码进行编译，并创建该函数的执行上下文和可执行代码。</li><li>执行代码，输出结果。</li></ol></li></ol><h3 id="什么是javaScript调用栈"><a href="#什么是javaScript调用栈" class="headerlink" title="什么是javaScript调用栈"></a>什么是javaScript调用栈</h3><p>在执行上下文创建好之后，JavaScript引擎会讲执行上下文压入栈中，通常把这种用来管理执行上下文的栈称为执行上下文栈，又称调用栈。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">function</span> add <span class="token punctuation">(</span>b<span class="token punctuation">,</span> c <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> b <span class="token operator">+</span> c<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">addAll</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">10</span>  result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span></code></pre><ol><li><p>创建全局上下文将其压入栈底部</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> globalContext <span class="token operator">=</span> <span class="token punctuation">{</span>  变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a <span class="token operator">=</span> undefined      add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>      addAll <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">)</span></code></pre></li><li><p>执行全局代码。首先执行<code>a=2</code>的赋值操作，执行该语句会讲全局上下文变量环境中a的值设置为2</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> globalContext <span class="token operator">=</span> <span class="token punctuation">{</span>  变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a <span class="token operator">=</span> <span class="token number">2</span>      add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>      addAll <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>调用<code>addAll</code>函数。当调用该函数时，JavaScript引擎会编译该函数，并为其创建一个执行上下文，最后还将该函数的执行上下文压入栈中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> addAllContext <span class="token operator">=</span> <span class="token punctuation">{</span>  变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    d <span class="token operator">=</span> undefined    result <span class="token operator">=</span> undefinde  <span class="token punctuation">}</span><span class="token punctuation">,</span>  词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>addAllContext<span class="token punctuation">)</span></code></pre></li><li><p>addAll函数的执行上下文创建好了之后，进入函数代码执行阶段，<code>d=10</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> addAllContext <span class="token operator">=</span> <span class="token punctuation">{</span>  变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    d <span class="token operator">=</span> <span class="token number">10</span>    result <span class="token operator">=</span> undefinde  <span class="token punctuation">}</span><span class="token punctuation">,</span>  词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>执行到add函数调用语句时，同样为其创建执行上下文，并将其压入调用栈</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> addContext <span class="token operator">=</span> <span class="token punctuation">{</span>  变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>addContext<span class="token punctuation">)</span></code></pre><p><strong>此时的执行上下文栈：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// stack</span><span class="token punctuation">[</span>  globalContext <span class="token operator">=</span> <span class="token punctuation">{</span>    变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>      a <span class="token operator">=</span> <span class="token number">2</span>      add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>      addAll <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  addAllContext <span class="token operator">=</span> <span class="token punctuation">{</span>    变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>      d <span class="token operator">=</span> <span class="token number">10</span>      result <span class="token operator">=</span> undefinde    <span class="token punctuation">}</span><span class="token punctuation">,</span>    词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  addContext <span class="token operator">=</span> <span class="token punctuation">{</span>    变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></li><li><p>当add函数返回时，该函数的执行上下文就会从栈顶弹出，并将result 的值设置为add函数的返回值9</p><pre class=" language-javascript"><code class="language-javascript">stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// stack</span><span class="token punctuation">[</span>  globalContext <span class="token operator">=</span> <span class="token punctuation">{</span>    变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>      a <span class="token operator">=</span> <span class="token number">2</span>      add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>      addAll <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  addAllContext <span class="token operator">=</span> <span class="token punctuation">{</span>    变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>      d <span class="token operator">=</span> <span class="token number">10</span>      result <span class="token operator">=</span> <span class="token number">9</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></li><li><p>addAll执行最后一个相加操作并返回，addAll的执行上下文也会从栈顶弹出，此时调用栈中就只剩下全局上下文了。</p><pre class=" language-javascript"><code class="language-javascript">stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// stack</span><span class="token punctuation">[</span>  globalContext <span class="token operator">=</span> <span class="token punctuation">{</span>    变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>      a <span class="token operator">=</span> <span class="token number">2</span>      add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>      addAll <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></li><li><p>至此，整个JavaScript流程执行结束。</p></li></ol><p>所以 调用栈是JavaScript引擎追踪函数执行的一个机制，当一次有多个函数被调用时，通过调用栈就能够追踪到哪个函数正在被执行以及各个函数之间的调用关系。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>每个调用函数，JavaScript引擎会为其创建执行上下文，并把该执行上下文压入调用栈，然后JavaScript引擎开始执行函数代码。</li><li>如果在一个函数A中调用了另外一个函数B，那么JavaScript引擎会为B函数创建执行上下文，并将B函数的执行上下文压入栈顶。</li><li>当前函数执行完毕后，JavaScript引擎会将该函数的执行上下文弹出栈。</li><li>当分配的调用栈空间被占满时，会引发“堆栈溢出”问题。</li></ol><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。通俗地理解，作用域就是变量与函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期。</p><h3 id="ES6之前，JavaScript只支持两种作用域"><a href="#ES6之前，JavaScript只支持两种作用域" class="headerlink" title="ES6之前，JavaScript只支持两种作用域"></a>ES6之前，JavaScript只支持两种作用域</h3><ul><li><p>全局作用域</p><p>全局作用域中的对象在代码中的任何地方都能够访问，其生命周期伴随着页面的生命周期。</p></li><li><p>函数作用域</p><p>函数作用域就是在函数内部定义的变量或者函数，并且定义的变量或者函数只能在函数内部被访问。函数执行结束之后，函数内部定义的变量会被销毁。</p></li></ul><h4 id="变量提升的问题"><a href="#变量提升的问题" class="headerlink" title="变量提升的问题"></a>变量提升的问题</h4><p>由于变量无论在哪里声明，在编译阶段都会被提取到执行上下文的变量环境中，所以这些变量在整个函数体内部的任何地方都能够被访问。</p><ol><li><p>变量容易在不被察觉的情况下被覆盖掉。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myname <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token keyword">function</span> showName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myname<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// undefined 而非小明</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> myname <span class="token operator">=</span> <span class="token string">"小红"</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myname<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// undefined 而非小明</span><span class="token punctuation">}</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>本应该销毁的变量没有被销毁。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 7</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 在创建执行上下文的时候，变量i已经被提升了，所以当for循环结束之后，变量i并没有被销毁</span></code></pre></li></ol><h3 id="ES6块级作用域"><a href="#ES6块级作用域" class="headerlink" title="ES6块级作用域"></a>ES6块级作用域</h3><p>为了解决变量提升带来的一系列问题，ES6引入了<code>let</code>和<code>const</code>关键字，从而使JavaScript拥有了块级作用域。</p><h4 id="JavaScript-是如何支持块级作用域的"><a href="#JavaScript-是如何支持块级作用域的" class="headerlink" title="JavaScript 是如何支持块级作用域的"></a>JavaScript 是如何支持块级作用域的</h4><h5 id="1-编译并创建执行上下文"><a href="#1-编译并创建执行上下文" class="headerlink" title="1. 编译并创建执行上下文"></a>1. 编译并创建执行上下文</h5><p>从执行上下文中来看，在创建执行上下文的时候执行流程：</p><ul><li>函数内部通过<code>var</code> 声明的变量，在编译阶段全都被存放在<strong>变量环境</strong>里面了。</li><li>通过<code>let </code>o r<code>const</code>声明的变量，在编译阶段会被存放到<strong>词法环境</strong>（Lexical Environment）中。</li><li>在函数的作用域块内部，通过<code>let</code>声明的变量并没有被存放到词法环境中。</li></ul><h5 id="2-执行代码"><a href="#2-执行代码" class="headerlink" title="2. 执行代码"></a>2. 执行代码</h5><p>当进入作用域块的时，作用域块中通过<code>let</code>声明的变量，会被存放在词法环境的一个单独区域中，这个区域中的变量并不影响作用域块外面的变量。</p><p>词法环境内部，维护了一个小型栈结构，栈底是函数最外层变量，进入作用域块后，就会把该作用域块内部的变量压到栈顶；当作用域执行完成之后，该作用域的信息就会从栈顶弹出。（这里的变量是指通过<code>let</code>或<code>const</code>声明的变量）</p><p>当使用到变量的时候，javaScript引擎需要在词法环境和变量环境中查找被使用变量的值，具体查找方法：<strong>沿着词法环境的栈顶向下查询，如果在词法环境中的某个块查找到了，就直接返回给JavaScript引擎，如果没有查找到，那么继续在变量环境中查找。</strong></p><p>块级作用域执行结束后，其内部通过<code>let</code>或<code>const</code>声明的变量就会从词法环境的栈顶弹出。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>块级作用域就是通过词法环境的栈结构来实现的，而变量提升是通过变量环境实现，通过这两者的结合，JavaScript引擎就同时支持了变量提升和块级作用域了。</strong></p><h2 id="作用域链和闭包"><a href="#作用域链和闭包" class="headerlink" title="作用域链和闭包"></a>作用域链和闭包</h2><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>词法作用域就是值作用域是有代码中函数声明的位置来决定的。所以词法作用域是静态的作用域，通过它能够预测代码在执行过程中如何查找标识符。</p><p><strong>词法作用域是代码编译阶段就决定好的，和函数怎么调用的没有关系。</strong></p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>每个执行上下文的变量环境中，都包含了一个外部引用，用来指向外部的执行上下文，这个外部引用称作<code>outer</code>。</p><p>当一段代码使用了一个变量时，JavaScript引擎首先会在“当前的执行上下文”中查找该变量，如果当前的变量环境中没有查找到，JavaScript引擎会继续<code>outer</code>所指向的执行上下文中查找。这个查找的链条就称为<strong>作用域链</strong>。</p><p>在 JavaScript 执行过程中，其<strong>作用域链是由词法作用域决定的</strong>。</p><h3 id="块级作用域中的变量查找"><a href="#块级作用域中的变量查找" class="headerlink" title="块级作用域中的变量查找"></a>块级作用域中的变量查找</h3><ol><li>先查找当前执行上下文词法环境栈顶</li><li>栈顶没有一直往下查找</li><li>词法环境中不存在则查找当前执行上下文中的变量环境</li><li>变量环境中依旧不存在则根据<code>outer</code> （根据词法作用域规则）到外部执行上下文查找</li><li>查找顺序重复1，2，3，4步骤。</li></ol><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p><strong>在JavaScript中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数用用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为“外部函数的闭包”</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">"小明"</span>  <span class="token keyword">let</span> test1 <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">const</span> test2 <span class="token operator">=</span> <span class="token number">2</span>   <span class="token keyword">var</span> innerBar <span class="token operator">=</span> <span class="token punctuation">{</span>    getName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span>      <span class="token keyword">return</span> myName    <span class="token punctuation">}</span><span class="token punctuation">,</span>    setName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      myName <span class="token operator">=</span> newName    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> innerBar<span class="token punctuation">}</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>bar<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'小张'</span><span class="token punctuation">)</span>bar<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ol><li><p>创建全局执行上下文,并将全局执行上下文入栈</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// stack = []</span><span class="token keyword">let</span> 全局执行上下文 <span class="token operator">=</span> <span class="token punctuation">{</span>  变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    bar <span class="token operator">=</span> undefined    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>        outer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>全局执行上下文<span class="token punctuation">)</span></code></pre></li><li><p>执行代码调用foo函数，创建foo函数执行上下文</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> foo函数执行上下文 <span class="token operator">=</span> <span class="token punctuation">{</span>  变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    myName <span class="token operator">=</span> undefined    innerBar <span class="token operator">=</span> undefined        outer <span class="token operator">=</span> 全局执行上下文  <span class="token punctuation">}</span><span class="token punctuation">,</span>  词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    test1 <span class="token operator">=</span> <span class="token number">1</span>    test2 <span class="token operator">=</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>foo函数执行上下文<span class="token punctuation">)</span></code></pre></li><li><p>foo函数执行完成，其返回值赋值给bar。（根据 词法作用域的规则，内部函数getName和setname总是可以访问他们的外部函数foo中的变量，所以当innerBar对象返回给全局变量bar时，虽然函数foo已经执行结束，但是getName和setName函数依旧可以使用foo函数中的变量myName和test1）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// stack </span><span class="token punctuation">[</span>  全局执行上下文 <span class="token operator">=</span> <span class="token punctuation">{</span>    变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>      bar <span class="token operator">=</span> innerbar      <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>      outer <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">foo</span><span class="token punctuation">(</span>closure<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    myName <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>    test1 <span class="token operator">=</span> <span class="token string">"1"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></li><li><p>调用bar.setName(‘小红’) 的时候，先创建setName函数的执行上下文，并将其入栈，随后开始执行内部代码，执行到<code>myName = 小红</code> 的时候开始查找myName 变量。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> bar_setName执行上下文 <span class="token operator">=</span> <span class="token punctuation">{</span>  变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    outer <span class="token operator">=</span> 全局执行上下文  <span class="token punctuation">}</span><span class="token punctuation">,</span>  词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>bar_setName执行上下文<span class="token punctuation">)</span></code></pre></li><li><p><strong>闭包作用域链查找</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// stack</span><span class="token punctuation">[</span>  全局执行上下文 <span class="token operator">=</span> <span class="token punctuation">{</span>    变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>      bar <span class="token operator">=</span> innerbar      <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>      outer <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">foo</span><span class="token punctuation">(</span>closure<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    myName <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>    test1 <span class="token operator">=</span> <span class="token string">"1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  bar_setName执行上下文 <span class="token operator">=</span> <span class="token punctuation">{</span>    变量环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>      outer <span class="token operator">=</span> 全局执行上下文    <span class="token punctuation">}</span><span class="token punctuation">,</span>    词法环境<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p><strong>JavaScript 引擎会沿着“当前执行上下文–&gt;foo 函数闭包–&gt; 全局执行上下文”的顺序来查找 myName 变量。</strong></p><p>此时查找顺序如下：</p><ol><li>查找当前执行上下文<code>setName 的执行上下文</code></li><li>没有则查找闭包<code>foo(closure)</code></li><li>foo 函数的闭包中包含了变量 myName，所以调用 setName 时，会修改 foo 闭包中的 myName 变量的值。</li></ol></li><li><p>调用bar.getName()流程如上4。</p></li></ol><h4 id="闭包的回收"><a href="#闭包的回收" class="headerlink" title="闭包的回收"></a>闭包的回收</h4><ul><li>如果引用闭包的函数是全局变量，那么闭包会一直存在知道页面关吧；如果这个闭包以后不在使用的话，就会造成内存泄漏。</li><li>如果引用闭包是个局部变量，等函数销毁后，在下次JavaScript引擎垃圾回收机制时，判断闭包这块内容如果已经不再被使用了，那么回收这块内存。</li></ul><p><strong>如果该闭包会一直使用，那么它可以作为全局变量而存在；但如果使用频率不高，而且占用内存又比较大的话，那就尽量让它成为一个局部变量。</strong></p><h2 id="JavaScript中的this"><a href="#JavaScript中的this" class="headerlink" title="JavaScript中的this"></a>JavaScript中的this</h2><p>作用域链和this是两套不同的系统，他们之间基本没有联系。</p><p><strong>this 是和执行上下文绑定的</strong>，也就是说每个执行上下文中都有一个this，执行上下文主要分三种，this也分三种：</p><ul><li>全局执行上下文中的this</li><li>函数中的this</li><li>eval中的this</li></ul><h3 id="全局执行上下文中的this"><a href="#全局执行上下文中的this" class="headerlink" title="全局执行上下文中的this"></a>全局执行上下文中的this</h3><p>全局执行上下文中的this是指向window对象的。这是this和作用域链的唯一交点，作用域链的最底端包含了window对象，全局执行上下文中的this也是指向window对象。</p><h3 id="设置函数执行上下文中的this"><a href="#设置函数执行上下文中的this" class="headerlink" title="设置函数执行上下文中的this"></a>设置函数执行上下文中的this</h3><ol><li><p>通过函数的call方法设置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token punctuation">{</span>  myName <span class="token punctuation">:</span> <span class="token string">"极客邦"</span><span class="token punctuation">,</span>  test1 <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>myName <span class="token operator">=</span> <span class="token string">"极客时间"</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span></code></pre></li><li><p>通过对象调用方法设置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">"极客时间"</span><span class="token punctuation">,</span>   showThis<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>myObj<span class="token punctuation">.</span><span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>使用对象来调用其内部的一个方法，该方法的this指向对象本身。</strong></p><ul><li>在全局环境中调用一个函数，函数内部的 this 指向的是全局变量 window。</li><li>通过一个对象来调用其内部的一个方法，该方法的执行上下文中的 this 指向对象本身。</li></ul></li><li><p>通过构造函数中设置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CreateObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"极客时间"</span><span class="token punctuation">}</span><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>当执行 <code>new CreateObj()</code>的时候，JavaScript引擎做了四件事：</p><ol><li>创建一个空对象<code> tempObj</code></li><li>调用<code>CreateObj.call</code>方法，并将<code>tempObj</code>作为call方法的参数，这样当<code>CreateObj</code>的执行上下文创建时，它的this就指向了<code>tempObj</code>对象</li><li>执行<code>CreateObj</code>函数，此时的<code>CreateObj</code>函数执行上下文中的this指向了<code>tempObj</code>对象</li><li>返回<code>tempObj</code>对象</li></ol></li></ol><h3 id="this的设计缺陷以及应对方案"><a href="#this的设计缺陷以及应对方案" class="headerlink" title="this的设计缺陷以及应对方案"></a>this的设计缺陷以及应对方案</h3><ol><li>嵌套函数中的this不会从外层函数中继承。<ol><li>通过变量保存this，将this体系转为作用域体系。</li><li>使用ES6箭头函数解决这个问题。</li></ol></li><li>普通函数中的this默认指向全局对象window。<ol><li>通过设置JavaScript的“严格模式”来解决。在严格模式下，默认执行一个函数，其函数的执行上下文中的this值是undefined。</li></ol></li></ol><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ol><li>函数作为对象的方法调用时，函数中的this就是该对象。</li><li>当函数被正常调用时，在严格模式下，this值是undefined，非严格模式下this指向全局window。</li><li>嵌套函数中的this不会继承外层函数的this值</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器架构</title>
      <link href="2021/12/24/liu-lan-qi-jia-gou/"/>
      <url>2021/12/24/liu-lan-qi-jia-gou/</url>
      
        <content type="html"><![CDATA[<p>Chrome架构： 仅仅打开了一个页面，为什么有四个进程？</p><p>进程和线程</p><p>线程：<br>●  线程是最小的执行单元。<br>●  线程是不能单独存在的，它是由进程来启动和管理的</p><p>进程：<br>● 一个进程就是一个程序的运行实例。启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，这样的运行环境叫进程。</p><p>线程是依附于进程的，而进程中使用多线程并行处理能提升运算速率。</p><p>进程和线程之间的关系特点：</p><ol><li> 进程中的任一线程执行出错，都会导致整个进程崩溃。</li><li>线程之间共享进程中的数据。<br> 线程之间可以对进程的公共数据进行读写操作。</li><li>当一个进程关闭之后，操作系统会回首进程所占用的内存。<br> 当一个进程退出时，操作系统会回收改进程所申请的所有资源；即使其中任一线程因为操作不当导致内存泄漏，当进程退出时，这些内存也会被正确回收。</li><li>进程之间的内容相互隔离。<br> 进程隔离是为保护操作系统中进程互不干扰的技术，每一个进程只能访问自己占有的数据，也就避免出现进程A写入数据到进程B的情况。正是因为进程之间的数据是杨哥隔离的，所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行数据的通信，这时候，就需要使用用于进程间通信（IPC）的机制了。<br> 单进程浏览器架构<br> 单进程浏览器是指浏览器的所有功能模块都是运行在哟个进程里，这些模块包含了网络、插件、JavaScript运行环境、渲染引擎、和页面等。</li></ol><p>单进程架构问题：不稳定、不流畅、不安全</p><p>问题1: 不稳定<br>早期浏览器需要借助于插件来实现诸如Web视频、Web游戏等各种强大的功能，但是插件是最容易出问题的模块，并且还运行在浏览器进程中，所以一个插件的意外崩溃会引起整个浏览器的崩溃。<br>除了插件之外，渲染引擎模块也是不稳定的，通常一些复杂的JavaSctipt代码就有肯呢个引起渲染引擎模块的崩溃。和插件一样，渲染引擎的崩溃也会导致整个浏览器的崩溃。</p><p>问题2: 不流畅<br>从“单进程浏览器架构示意图”可以看出，所有页面的渲染模块、JavaScript执行环境以及插件都是运行在同一个线程中，这就意味着同一时刻只能有一个模块可以执行。<br>除了脚本或者插件会让单进程浏览器变卡顿外，页面的内存泄漏也是单进程变慢的一个重要原因。通常浏览器的内核都是非常复杂的，运行一个复杂点的页面再关闭页面，会存在内存不能完全回收的情况，这样导致的问题是使用时间越长，内存占用越高，浏览器会变慢。</p><p>问题3：不安全<br>通过插件可以获取到操作系统的任意资源，如果是个恶意插件，那么它就可以释放病毒、窃取你的账号密码，引发安全问题。</p><p>多进程浏览器时代</p><p>早期的多进程架构：</p><p>从上图可见，Chrome的页面是运行在单独的渲染进程中的，同时页面里的插件也是运行在单独的插件进程中，而进程之间是通过IPC 机制进行通信（如图中虚线部分）。</p><p>如何解决不稳定的问题。 由于进程是互相隔离的，所以当一个页面或者插件崩溃时，影响到的仅仅是当前的页面进程或者插件进程，不会影响到浏览器和其他页面。</p><p>如何解决运行不流畅的问题。 javaScript也是运行在渲染进程中的，所以即使JavaScript阻塞了渲染进程，影响到的也只是当前的渲染页面，而不会影响到浏览器和其他页面，因为其他页面的脚本是运行在他们自己的渲染进程中的。<br>对于内存泄漏的解决方案：因为当关闭一个页面时，整个渲染进程也会被关闭，之后该进程所占用的内存都会被系统回收，这样就轻松解决了浏览器页面的内存泄漏的问题。</p><p>如何解决安全问题。多进程的架构可以使用安全沙箱，Chorme把插件进程和渲染进程锁在沙箱里，这样即使在渲染进程或者插件进程执行了恶意程序，恶意程序也无法突破沙箱获取系统权限。</p><p>目前的多进程架构<br>从图中可以看出目前的Chrome浏览器包括：一个浏览器（Brower）主进程，一个GPU进程，一个网络进程，多个渲染进程和多个插件进程。<br>● 浏览器进程：主要负责页面显示，用户交互子进程管理，同时提供存储等功能。<br>● 渲染进程： 核心任务是将HTML、CSS和JavaScript转换为用户可以与之交互的网页。排版引擎Blink和JavaScript引擎都运行在该进程中，默认情况下Chrome会为每个Tab标签创建一个渲染进程。渲染进程都运行在沙箱模式下。<br>● GPU进程：GPU使用的初衷是实现3D CSS效果，随后网页，Chrome的UI界面都是采用GPU来绘制，是的GPU成为浏览器的普遍需求。所以Chrome在多进程架构上引入了GPU进程。<br>● 网络进程：主要负责页面的网络资源，之前作为一个模块运行在浏览器进程中，现在独立出来成为一个单独的进程。<br>● 插件进程：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</p><p>多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题：<br>● 更高的资源占用。因为每个进程都会包含公共基础结构的副本如（JavaScript的运行环境），这意味着浏览器会消耗更多的内存资源。<br>● 更复杂的体系架构。浏览器各模块之间耦合性高、扩展性差等问题会导致现在的架构很难适应新的需求。</p><p>未来面向服务的架构<br>在 2016 年，Chrome 官方团队使用“面向服务的架构”（Services Oriented Architecture，简称 SOA）的思想设计了新的 Chrome 架构。也就是说 Chrome 整体架构会朝向现代操作系统所采用的“面向服务的架构” 方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务（Service）都可以在独立的进程中运行，访问服务（Service）必须使用定义好的接口，通过 IPC 来通信，从而构建一个更内聚、松耦合、易于维护和扩展的系统，更好实现 Chrome 简单、稳定、高速、安全的目标。<br>Chrome 最终要把 UI、数据库、文件、设备、网络等模块重构为基础服务，类似操作系统底层服务，下面是 Chrome“面向服务的架构”的进程模型图：</p><p>同时 Chrome 还提供灵活的弹性架构，在强大性能设备上会以多进程的方式运行基础服务，但是如果在资源受限的设备上（如下图），Chrome 会将很多服务整合到一个进程中，从而节省内存占用。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兄弟连Linux笔记</title>
      <link href="2020/12/23/xiong-di-lian-linux-bi-ji/"/>
      <url>2020/12/23/xiong-di-lian-linux-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="兄弟连Linux笔记"><a href="#兄弟连Linux笔记" class="headerlink" title="兄弟连Linux笔记"></a>兄弟连Linux笔记</h1><h2 id="3-1-注意"><a href="#3-1-注意" class="headerlink" title="3.1 注意"></a>3.1 注意</h2><ul><li><p>Linux 严格区分大小写</p></li><li><p>Linux中所有内容以文件形式保存，包括硬件</p><ul><li>硬盘文件是/dev/sd[a-p]</li><li>光盘文件是/dev/sr0等</li></ul></li><li><p>Linux不靠扩展名区分文件类型</p><ul><li>压缩包：”<em>.gz”、”</em>.bz2” “<em>.tar.bz2”、”</em>.tgz”等</li><li>二进制软件包： “.rpm”</li><li>网页文件：”<em>.html”、”</em>.php”</li><li>脚本文件：”*.sh” </li><li>配置问价：”*.conf”</li></ul></li><li><p>Linux所有的存储设备都必须挂载之后用户才能是哦那个，包括硬盘、U盘和光盘</p></li><li><p>Windows下的程序不能直接在Linux中安装和运行</p></li></ul><h2 id="3-2-服务器管理和维护建议"><a href="#3-2-服务器管理和维护建议" class="headerlink" title="3.2 服务器管理和维护建议"></a>3.2 服务器管理和维护建议</h2><h3 id="1-目录及作用"><a href="#1-目录及作用" class="headerlink" title="1. 目录及作用"></a>1. 目录及作用</h3><table><thead><tr><th>目录名</th><th>目录作用</th></tr></thead><tbody><tr><td>/bin/</td><td>存放系统命令的目录，普通用户和超级用户都可以执行。不过放在/bin下的命令在单用户模式下也可以执行</td></tr><tr><td>/sbin/</td><td>保存和系统环境设置相关的命令，只有超级用户可以使用这些命令进行系统环境设置，但是有些命令可以允许普通用户查看</td></tr><tr><td>/usr/bin</td><td>存放系统命令的目录，普通用户和超级用户都可以执行，这些命令和系统执行无关，在单用户模式下不能执行</td></tr><tr><td>/usr/sbin/</td><td>存放根文件系统不必要的系统管理命令，例如多数服务程序。只有超级用户可以使用。大家其实可以注意到Linux的系统，在所有”sbin“目录中保存的命令只有超级用户可以使用，”bin”目录中保存的命令所有用户都能使用</td></tr><tr><td>/boot/</td><td>系统启动目录，保存系统启动相关文件，如内核文件和启动引导程序（grub）文件等</td></tr><tr><td>/dev/</td><td>设备文件保存位置，我们已将说过Linux中的所有内容以文件的形式保存，包括硬件，那么这个目录就是用来保存所有硬件设备文件的</td></tr><tr><td>/etc/</td><td>配置文件保存位置，系统内所有采用默认安装方式（rpm安装）的服务的配置文件全部都保存在这个目录当中，如用户的账户和密码，服务的启动脚本，常用服务的配置文件</td></tr><tr><td>/home/</td><td>普通用户的家目录。建立每个用户时，每个用户要有一个默认登陆位置，这个位置就是这个用户的家目录，所有普通用户的家目录就是在/home下建立一个和用户名相同的目录。如果user1的家目录就是/home/user1</td></tr><tr><td>/lib/</td><td>系统调用函数的库保存位置</td></tr><tr><td>/lost+found/</td><td>当系统意外崩溃或及其意外关机，而产生一些文件碎片放在这里。当系统启动的过程中fsck（file system check）工具会检查这里，并修复已经损坏的文件系统。这个目录只在每个分区中出现，例如/lost+found就是根分区的备份恢复目录，/boot/lost+found/就是/boot分区的备份恢复目录</td></tr><tr><td>/media/</td><td>挂载目录。系统建议是用来挂载媒体设备的，例如软盘和光盘</td></tr><tr><td>/mnt/</td><td>挂载目录。早期Linux中只有这一个挂载目录，并没有细分。现在这个目录系统建议挂载额外设备，如U盘，移动硬盘和其他操作系统分区</td></tr><tr><td>/misc/</td><td>挂载目录。系统建议用来挂载NFS服务的共享目录。只要是一个已经建立的空目录就可以作为挂载点。虽然操作系统准备了三个默认的挂载目录/media、/mnt/、/misc，但是到底在哪个目录中挂载什么设备都可以由管理员自己决定。</td></tr><tr><td>/opt/</td><td>第三方安装的软件保存的位置。这个目录就是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中。不过我更习惯把软件放置到/usr/local/目录中，也就是说/usr/local/目录也可以用来安装软件。</td></tr><tr><td>/proc/</td><td>虚拟文件系统，该目录中的数据并不保存到硬盘当中，而是保存内存当中。主要保存系统的内核，进程，外部设备状态和网络状态灯。如/proc/cpuInfo是保存CPU信息的，/proc/devices是保存设备去顶的列表的，/proc/filesystems是保存文件系统列表的，/proc/net/是保存网络协议的。</td></tr><tr><td>/sys/</td><td>虚拟文件系统。和/proc目录相似，都是保存在内存当中的，主要保存于内核相关信息的</td></tr><tr><td>/root/</td><td>超级用户的家目录。普通用户家目录在”/home“下，超级用户家目录直接在”/“下。</td></tr><tr><td>/srv/</td><td>服务数据目录。一些系统服务启动之后，可以在这个目录中保存所需要的数据</td></tr><tr><td>/tmp/</td><td>临时目录。系统存放临时文件的目录，该目录下所有用户都可以访问和写入。我们建议此目录中不能保存重要数据，最好每次开机都把该目录清空</td></tr><tr><td>/usr/</td><td>系统软件资源目录。注意usr 不是user的缩写，而是”Unix software Resource“的缩写，所以不是存放用户数据，而是存放系统软件资源的目录。系统中安装的软件大多数保存在这里，所以除了/usr/bin/和/usr/sbin/这两个目录，再介绍几个/usr/下的二级目录</td></tr><tr><td>/var/</td><td>动态数据保存位置。主要保存缓存、日志以及软件运行所产生的文件</td></tr></tbody></table><h3 id="2-服务器注意事项"><a href="#2-服务器注意事项" class="headerlink" title="2. 服务器注意事项"></a>2. 服务器注意事项</h3><ul><li>远程服务器不允许关机，只能重启</li><li>重启之前应该关闭服务</li><li>不要在服务器访问高峰运行高负载命令（大文件扫描、大文件压缩复制等）</li><li>远程配置防火墙时候不要把自己提出服务器</li><li>指定合理的密码规范并定期更新</li><li>合理分配权限</li><li>定期备份重要数据和日志</li></ul><h2 id="4-Linux-常用命令"><a href="#4-Linux-常用命令" class="headerlink" title="4. Linux 常用命令"></a>4. Linux 常用命令</h2><h3 id="4-1-文件处理命令"><a href="#4-1-文件处理命令" class="headerlink" title="4.1 文件处理命令"></a>4.1 文件处理命令</h3><h4 id="4-1-1-命令格式与目录处理命令ls"><a href="#4-1-1-命令格式与目录处理命令ls" class="headerlink" title="4.1.1 命令格式与目录处理命令ls"></a>4.1.1 命令格式与目录处理命令ls</h4><p>命令格式： 命令 [-选项] [参数]</p><p>​    例： ls -la /etc</p><p>说明： </p><ol><li><p>个别命令使用不遵循此格式</p></li><li><p>当有多个选项时，可以写在一起</p></li><li><p>简化选项与完场选项 -a 等于 –all</p></li></ol><p><strong>ls</strong></p><pre class=" language-shell"><code class="language-shell">ls // 显示目录ls -a // 查看所有文件，可看到隐藏文件，为了告诉用户不可轻易操纵 .开头的就是隐藏文件ls -l // 长格式显示     -rw-------. 1 root root  1208 12月 23 08:33 anaconda-ks.cfg    文件权限 引用次数 文件所有者 文件所属组 文件的大小（默认字节） 最后一次修改时间 文件名    -rw-r--r--    -: 文件 d: 目录 l: 软连接    r: 读 w: 写 x: 执行    rw- r-- r--    u所有者 g所属组 o其他人ls -ld /etc d: 显示目录本身，而不显示目录下的数据ls -i i: 文件的i节点</code></pre><h4 id="4-1-2-目录处理命令"><a href="#4-1-2-目录处理命令" class="headerlink" title="4.1.2 目录处理命令"></a>4.1.2 目录处理命令</h4><p><strong>mkdir</strong></p><pre class=" language-shell"><code class="language-shell">mkdir /tmp/xiaodianyingmkdir /tmp/japan/boduo // 无法创建需要加参数 -pmkdir -p /tmp/japan/boduo // 递归创建mkdir /tmp/japan/cangjin /temp/japan/longze/  // 同时创建多个目录</code></pre><p><strong>cd</strong>(change directory)</p><pre class=" language-sh"><code class="language-sh">cd 目录名称</code></pre><p><strong>pwd</strong>(print working directory)</p><pre class=" language-shell"><code class="language-shell">pwd // 显示完整目录</code></pre><p><strong>.</strong> 表示当前目录</p><p><strong>..</strong> 表示当前目录的上级目录</p><p><strong>rmdir</strong> (remove empty directory) 删除空目录</p><pre class=" language-shell"><code class="language-shell">rmdir 目录名</code></pre><p><strong>cp</strong> (copy) 复制</p><pre class=" language-shell"><code class="language-shell">cp -rp [原文件或目录] [原文件目录] ... [目标目录]   -r 复制目录 可以更改文件名   -p 保留文件属性</code></pre><p><strong>mv</strong>(move) 剪切、改名</p><pre class=" language-shell"><code class="language-shell">mv [原文件或目录] [目标目录]</code></pre><p><strong>rm</strong>(remove) 删除文件或目录</p><pre class=" language-shell"><code class="language-shell">rm -rf [文件或目录]   -r 删除目录   -f 强制删除</code></pre><h4 id="4-1-3-文件处理命令"><a href="#4-1-3-文件处理命令" class="headerlink" title="4.1.3 文件处理命令"></a>4.1.3 文件处理命令</h4><p><strong>touch</strong> 创建空文件</p><pre class=" language-shell"><code class="language-shell">touch [文件名]</code></pre><p><strong>cat</strong>显示文件内容</p><pre class=" language-shell"><code class="language-shell">cat [文件名]cat -n [文件名] // 查看文件内容 带行号cat </code></pre><p><strong>tac</strong> 与cat一直  反向显示命令 不支持-n</p><p><strong>more</strong> 分页显示文件内容</p><pre class=" language-shell"><code class="language-shell">more [文件名]（空格）或f  翻页（enter）   换行  q或Q       退出</code></pre><p><strong>less 分页显示内容</strong></p><pre class=" language-shell"><code class="language-shell">于more一样但是多了以下命令b 向上翻页上箭头 向上找/搜索内容   ; n next 下一条 p preview 上一条</code></pre><p><strong>head</strong> 显示文件前面几行</p><pre class=" language-shell"><code class="language-shell">head [文件名]-n 指定行数</code></pre><p><strong>tail</strong>显示末尾几行</p><pre class=" language-shell"><code class="language-shell">tail [文件名]-n 指定行数-f 动态显示</code></pre><h4 id="4-1-4-链接命令"><a href="#4-1-4-链接命令" class="headerlink" title="4.1.4 链接命令"></a>4.1.4 链接命令</h4><p><strong>ln</strong>(link) 生成链接文件</p><pre class=" language-shell"><code class="language-shell">ln -s [原文件] [目标文件]   -s 创建软连接（类似windows快捷方式）ln [原文件] [目标文件] // 相当于拷贝cp -p + 同步更新，原文件丢失硬链接也能访问；查看i节点，一个i节点可对应多个文件；不能跨分区；不能针对目录使用</code></pre><h3 id="4-2-权限管理命令"><a href="#4-2-权限管理命令" class="headerlink" title="4.2 权限管理命令"></a>4.2 权限管理命令</h3><h4 id="4-2-1-权限管理命令chmod"><a href="#4-2-1-权限管理命令chmod" class="headerlink" title="4.2.1 权限管理命令chmod"></a>4.2.1 权限管理命令chmod</h4><p><strong>chmod</strong> (change the permissions mode of a file) 改变文件或目录的权限</p><pre class=" language-shell"><code class="language-shell">chmod [{ugoa}{+-=}{rwx}] [文件或目录]    //[{所有者，用户组，其他人，所有人}{增加权限，减少权限，重写权限}{读，写，执行}]      [mode=421] [文件或者目录]      -R 递归修改</code></pre><pre class=" language-shell"><code class="language-shell">file:    r: cat/more/head/tail/less    w: vim    x: script commanddirectory    r: ls    w: touch/mkdir/rmdir/rm    x: cd</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript基础</title>
      <link href="2020/12/02/javascript-ji-chu/"/>
      <url>2020/12/02/javascript-ji-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.bilibili.com/video/BV1Mz4y1Q79G?p=27">javascript 高级</a> 笔记</p></blockquote><h1 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h1><h2 id="执行上下文-1"><a href="#执行上下文-1" class="headerlink" title="执行上下文"></a>执行上下文</h2><ol><li><p>代码分类</p><ul><li>全局代码</li><li>函数代码（局部）</li></ul></li><li><p>全局执行上下文</p><ul><li><p>在执行全局代码前将window确定为全局执行上下文</p></li><li><p>对全局数据进行预处理   变量提升</p><ul><li><p>var 定义的全局变量==&gt; undefined，添加为window的属性。</p></li><li><p>function声明的全局函数==&gt; 赋值（fun）, 添加为window的方法。 同样会提升</p></li><li><p>this ==&gt; 赋值window</p></li><li><p>开始执行全局代码</p></li></ul></li></ul></li><li><p>函数执行上下文</p><ul><li>在调用函数，准备执行函数体之前，创建对应的函数执行上下文对象（虚拟的，存在于栈里面）</li><li>对局部数据进行预处理   函数提升<ul><li>形参变量 ==&gt; 赋值（实参）==&gt; 添加为执行上下文的属性</li><li>argument ==&gt; 赋值(实参列表)， 添加为执行上下文的属性</li><li>var 定义的局部变量==&gt; undefined, 添加为执行上下文的属性</li><li>function声明的函数 ==&gt; 赋值（fun），添加为执行上下文的方法</li><li>this ==&gt; 赋值（调用函数的对象） </li></ul></li></ul></li></ol><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><ol><li>在全局代码执行前，JS引擎就会创建一个栈来存储管理所有的执行上下文对象</li><li>在全局执行上下文（window）确定后，将其添加到栈中（压栈）</li><li>在函数执行上下文创建之后，将其添加到栈中（压栈）</li><li>在当前函数执行完之后，将栈顶的对象移除（弹栈）</li><li>当所有代码执行完之后，栈中只剩window</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>先变量提升，再函数提升</li><li>初始化在所有变量提升之后</li></ol><h1 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ol><li><p>理解</p><ul><li>就是一块“地盘”，一个代码所在的区域。</li><li>它是静态的（相对于全局上下文对象）， 在编写代码的时候就确定了</li></ul></li><li><p>分类</p><ul><li>全局作用域</li><li>函数作用域</li><li>没有块作用域（ES6有了）</li></ul></li><li><p>作用</p><ul><li>隔离变量，不同作用域下同名变量不会有冲突<h2 id="作用域与执行上下文的区别"><a href="#作用域与执行上下文的区别" class="headerlink" title="作用域与执行上下文的区别"></a>作用域与执行上下文的区别</h2></li></ul></li><li><p>区别1</p><ul><li>全局作用域外每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了，而不是在调用时。</li><li>全局执行上下文环境是在全局作用域确定之后，js代码马上执行之前创建</li><li>函数执行上下文环境是在调用函数的时候，函数体代码执行之前创建</li></ul></li><li><p>区别2</p><ul><li>作用域是静态的，只要函数定义好了就一直存在，且不会发生变化</li><li>上下文的环境是动态的，调用函数时创建，函数调用结束时上下文环境就会自动释放</li></ul></li><li><p>联系</p><ul><li>上下文环境（对象）是从属所在的作用域中</li><li>全局上下文环境 ==&gt; 全局作用域</li><li>函数上下文环境 ==&gt; 对应的函数使用域  </li></ul></li></ol><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><ol><li><p>理解</p><ul><li>多个上下级关系的作用域形成的链，他的方向是从下向上的（从内到外）</li><li>查找变量的时候沿着作用域链来查找的</li></ul></li><li><p>查找一个变量的查找规则</p><ul><li>在当前作用域的执行上下文中查找对应的属性如果有直接返回，否则进入2</li><li>在上一级作用域的执行上下文中查找对应的属性，如果有直接返回，否则进入3</li><li>再次执行2的相同操作，直到全局作用域，如果还找不到就抛出找不到的异常<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1></li></ul></li><li><p>如何产生闭包？</p><ul><li>当一个嵌套的内部（子）的内部函数引用了嵌套的外部（父）函数的变量（函数）时，就产生了闭包</li></ul></li><li><p>闭包到底是什么？</p><ul><li>使用chrom调试查看</li><li>理解一：闭包是嵌套的内部函数</li><li>理解二：内部函数包含被引用变量（函数）的对象</li><li>注意：闭包存在于嵌套的内部函数中</li></ul></li><li><p>产生闭包的条件</p><ul><li>函数嵌套</li><li>内部i函数引用了外部函数的数据（变量/函数）</li></ul></li><li><p>注意：</p><ul><li>执行子函数定义就会产生闭包（不用调用子函数）</li></ul></li><li><p>常见的闭包</p><ol><li>将函数作为另一个函数的返回</li><li>将函数作为实参作为另一个函数调用</li></ol></li></ol><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><ol><li>使用函数内部的变量在函数执行完后，仍然存活在内存中（延长了局部变量的生命周期）</li><li>让函数外部可以操作（读写）到函数内部的数据（变量/函数）</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>函数执行完后，函数内部声明的局部变量是否还存在？ 一般不存在，存在于闭包中的变量才可能存在。</li><li>在函数外部能直接访问函数内部的局部变量吗？不能，但是我们可以通过闭包让外部操作它。</li></ol><h2 id="闭包的生命周期"><a href="#闭包的生命周期" class="headerlink" title="闭包的生命周期"></a>闭包的生命周期</h2><ol><li>产生：在嵌套内部函数定义执行完成时就产生了（不是在调用）</li><li>死亡：在嵌套的内部函数成为垃圾对象时</li></ol><h2 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h2><ol><li>定义JS模块<ul><li>具有特定功能的JS文件</li><li>将所有的数据和功能都封装在一个函数内部（私有的）</li><li>只向外暴露一个包含n个方法的对象和函数</li><li>模块的使用者，只需要通过模块暴露的对象调用方法来实现对应的功能<h2 id="闭包的缺点"><a href="#闭包的缺点" class="headerlink" title="闭包的缺点"></a>闭包的缺点</h2><ul><li>函数执行完毕之后，函数内部的局部变量没有释放，占用内存的时间变长。</li><li>容易造成内存泄漏</li><li>*解决**</li><li>能不用闭包就不用</li><li>及时释放</li></ul></li></ul></li></ol><h2 id="内存溢出与内存泄漏"><a href="#内存溢出与内存泄漏" class="headerlink" title="内存溢出与内存泄漏"></a>内存溢出与内存泄漏</h2><ol><li>内存溢出<ol><li>一种程序运行出现的错误</li><li>当程序运行的内存超过了剩余的内存时，就抛出内存溢出的错误</li></ol></li><li>内存泄漏<ol><li>占用的内存没有及时释放</li><li>内存泄漏积累多了就会导致内存溢出</li><li>常见的内存泄漏<ul><li>意外的全局变量</li><li>没有及时清理的定时器或回调函数</li><li>闭包</li></ul></li></ol></li></ol><h1 id="继承模式"><a href="#继承模式" class="headerlink" title="继承模式"></a>继承模式</h1><ol><li><p>方式1，原型链的继承</p><ol><li>套路<ul><li>定义父类型构造函数</li><li>给父类型的原型添加方法</li><li>定义子类型的构造函数</li><li>创建父类型的对象赋值给子类型的原型</li><li>将子类原型的结构属性属性设置为子类型</li><li>给子类型原型添加方法</li><li>创建子类型的对象：可以调用父类型的方法</li></ul></li><li>关键<ul><li>子类型的原型为父类型的一个实例对象</li></ul></li></ol></li><li><p>借用构造函数继承（假的）</p><ol><li><p>套路</p><ol><li>定义父类型构造函数</li><li>定义子类型构造函数</li><li>在子类型构造函数中间调用父类型构造函数</li></ol></li><li><p>关键：</p><ol><li>在子类型构造函数中通过call()调用父类型构造函数</li></ol></li><li><p>组合继承</p></li><li><p>原型链+借用构造函数的组合继承</p><ol><li>利用原型链实现对父类型方法的继承</li><li>利用super()借用父类型构造函数初始化相同的属性</li></ol></li></ol></li></ol><h1 id="线程机制与事件机制"><a href="#线程机制与事件机制" class="headerlink" title="线程机制与事件机制"></a>线程机制与事件机制</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>   <strong>进程：</strong>　程序的一次执行，它占有一片独有的内存空间。　可以通过windows任务管理器查看进程<br>   <strong>线程：</strong> </p><ul><li><p>是进程内的一个独立执行单元</p></li><li><p>是程序执行的一个完整流程</p></li><li><p>是cpu的最小调度单位</p></li><li><p>*相关知识：**</p></li><li><p>应用程序必须运行在某个进程的某个线程上</p></li><li><p>一个进程中至少有一个运行的线程： 主线程，进程启动之后自动创建</p></li><li><p>一个进程中也可以同时运行多个线程，我们会说程序是多线程运行的</p></li><li><p>一个进程内的数据可以供其中的多个线程直接共享</p></li><li><p>多个进程之间的数据不能直接进行共享的</p></li><li><p>线程池（thread pool）: 保存多个线程对象的容器，实现线程对象的反复利用<br>　　<br><strong>相关问题：</strong></p><ul><li>何为多进程程与多线程</li><li>多进程运行： 一个应用程序可以同时启动多个实例运行</li><li>多线程： 在一个进程内，同时有多个线程运行</li><li>比较单线程和多线程<ol><li>多线程<ol><li>优点：<ul><li>能有效提升cpu的利用率</li></ul></li><li>缺点：<ul><li>创建多线程开销</li><li>线程之间切换开销</li><li>死锁与状态同步问题</li></ul></li></ol></li><li>单线程<ol><li>优点：<ul><li>顺序编程简单易懂</li></ul></li><li>缺点：<ul><li>效率低<h2 id="js-是单线程还是多线程"><a href="#js-是单线程还是多线程" class="headerlink" title="js 是单线程还是多线程"></a>js 是单线程还是多线程</h2></li></ul></li></ol></li></ol></li></ul></li><li><p>js是单线程运行</p></li><li><p>但使用H5中的 Web Workers可以多线程运行</p><h2 id="浏览器运行是单线程还是多线程？"><a href="#浏览器运行是单线程还是多线程？" class="headerlink" title="浏览器运行是单线程还是多线程？"></a>浏览器运行是单线程还是多线程？</h2></li><li><p>都是多线程运行的</p><h2 id="浏览器是单进程还是多进程？"><a href="#浏览器是单进程还是多进程？" class="headerlink" title="浏览器是单进程还是多进程？"></a>浏览器是单进程还是多进程？</h2></li><li><p>有的是单进程的</p><ul><li>firefox</li><li>老版IE</li></ul></li><li><p>有的是多线程的</p><ul><li>chrome</li><li>新版IE</li></ul></li><li><p>如何查看浏览器是否是多进程运行呢？</p><ul><li>任务管理器 </li></ul></li></ul><h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><p> 支持浏览器运行的最核心的程序<br> 不同浏览器可能不一样</p><ul><li>Chrome, Safari: webkit</li><li>firefox: Gecko</li><li>IE: Trident</li><li>360,搜狗等国内浏览器： Trident + webkit<h3 id="内核由很多模块组成"><a href="#内核由很多模块组成" class="headerlink" title="内核由很多模块组成"></a>内核由很多模块组成</h3>== 主线程 ==</li><li>js引擎模块： 负责js程序的编译和运行</li><li>Html、css文档解析模块： 负责页面文本的解析</li><li>DOM/CSS模块： 负责dom/css在内存中间的相关处理</li><li>布局和渲染模块: 负责页面的布局效果的绘制（内存中的对象）<br>== 分线程 ==</li><li>定时器模块：负责定时器的管理</li><li>DOM事件响应模块： 负责事件的管理</li><li>网络请求模块： 负责ajax请求<h2 id="Web-workers"><a href="#Web-workers" class="headerlink" title="Web workers"></a>Web workers</h2><ol><li>H5 规范提供了js分线程实现，取名为Web Workers</li><li>相关API</li><li>Worker：构造函数，加载分线程执行的js文件</li><li>Woker.prototype.onmessage: 用于接收另一个线程的回调函数</li><li>Worker.prototype.postMessage: 向另一个线程发送消息</li><li>不足</li><li>Worker代码不能操作DOM(更新UI)</li><li>不能跨域加载JS</li><li>不是每个浏览器都支持这个新特性</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典三大排序</title>
      <link href="2020/11/29/jing-dian-san-da-pai-xu/"/>
      <url>2020/11/29/jing-dian-san-da-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/42541704">三大经典排序 | 冒泡排序，选择排序，快速排序</a></p></blockquote><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>直接上偷来的图<br><img src="https://pic4.zhimg.com/v2-33a947c71ad62b254cab62e5364d2813_b.webp" alt="冒泡排序"></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhitao-theo/bolg_img/2020-11-01/v2-1c7e20f306ddc02eb4e3a50fa7817ff4_b.gif"></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p><a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html">快速排序（Quicksort）的Javascript实现</a></p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @file 快速排序和冒泡排序 * @author 郭治涛 * @date 2020/11/29 */</span> <span class="token comment" spellcheck="true">/**  * @desc 冒泡排序 时间复杂度O(n^2)  * @param {Array} arr 要排序的数组      */</span><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请输入正确的类型'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @desc 选择排序法 时间复杂度O(n^2) * @param {Array} arr  */</span><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请输入正确的类型'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @desc 快速排序 时间复杂度 O(nlogn) * @param {Array} arr 被排序的数组 * 1. 随机选择一个基准，小于这个基准的值放在左边，大于的值放在右边 * 2. 将基准 左右两边分作两个子集 * 3. 将每个子集连接重复第一步操作 */</span><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请输入正确的类型'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> pivotIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// let pivot = arr[pivotIndex]; 若不将其从原数组中删除则 无法判断 数组元素重复的情况。</span>  <span class="token keyword">let</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pivotIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// } else if (arr[i] > pivot){</span>    <span class="token comment" spellcheck="true">//   right.push(arr[i]);</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span>  <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** [ 1, 2, 2, 4, 5, 6, 9, 21 ]* [ 1, 2, 2, 4, 5, 6, 9, 21 ]* [ 1, 2, 2, 4, 5, 6, 9, 21 ]*/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件</title>
      <link href="2020/11/14/shi-jian/"/>
      <url>2020/11/14/shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>当浏览器发展到第四代的时候，浏览器开发团队遇到了一个问题：页面的哪一部分会拥有某个特定的事件？一组同心圆，手指指向圆心，手指指向的 不是一个圆，而是纸上的所有圆。如果你单击了某个按钮，他们都认为单机事件不仅仅发生在按钮上。换句话说，在单机按钮的同时，你也单击了按钮的容器元素，甚至单击了整个页面。</p><p><strong>事件流</strong> 描述的就是从页面中接收事件的顺序。</p><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p> IE的事件流叫做事件冒泡， 即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。</p><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该是最后接收到事件。事件捕获的用意在于在事件到达预定目标之前捕获它。</p><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>“DOM2级事件流”规定的事件流包括三个阶段： </p><ol><li>事件捕获阶段：为截获事件提供了机会。</li><li>处于目标阶段：实际的目标接收到事件。</li><li>事件冒泡阶段：在这个阶段对事件做出响应。   </li></ol><h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><p>事件就是用户或浏览器自身执行的某种动作。诸如 click、load和mouseover ，都是事件名字。而响应某个事件的函数就叫做事件处理程序（或事件侦听器）</p><h3 id="HTML事件处理程序"><a href="#HTML事件处理程序" class="headerlink" title="HTML事件处理程序"></a>HTML事件处理程序</h3><p>某个元素咫尺的每种事件，都可以使用一个与相应事件处理程序同名的HTML特性来指定。这个特性的值应该是能够执行JavaScript代码。</p><p>事件处理程序中的代码在执行的时候，有权访问全局作用域中的任何代码。这样会创建一个封装着元素属性值的函数，这个函数中有一个局部变量event,也就是事件对象。</p><p>通过event变量，可以直接访问事件对象，你不用自己定义它，也不用从函数的参数列表中国读取。在这个函数内部，this值等于事件的目标元素。</p><h4 id="HTML-事件指定处理程序的缺点"><a href="#HTML-事件指定处理程序的缺点" class="headerlink" title="HTML 事件指定处理程序的缺点"></a>HTML 事件指定处理程序的缺点</h4><ol><li>时差问题，当html刚好渲染完成，js还没有解析的时候，用户触发了某个事件，可能没有执行的处理程序还没加载完成，此时就会报错。</li><li>扩展事件处理程序的作用域链在不同的浏览器中会导致不同的结果，很可能会在访问非限定对象成员时出错。</li><li>HTML 与JavaScript 代码紧密耦合。</li></ol><h3 id="DOM0级事件处理程序"><a href="#DOM0级事件处理程序" class="headerlink" title="DOM0级事件处理程序"></a>DOM0级事件处理程序</h3><p>  通过javaScript 指定事件处理程序的传统方式，就是将一个函数赋值给一个事件处理程序属性。这种为事件处理程序的方法是在第四代 web浏览器中出现。这种方式现在也还支持，原因一是简单，二是具有跨浏览器的优势。==要使用JavaScript指定事件处理程序，首先必须取得一个要操作的对象的引用。== </p><h3 id="DOM2级事件处理程序"><a href="#DOM2级事件处理程序" class="headerlink" title="DOM2级事件处理程序"></a>DOM2级事件处理程序</h3><p>  “DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：addEvenListener() 和removeEventListener()。所有DOM节点中都包含这两个方法，并且他们都接受3个参数：要处理的事件名、作为事件处理的函数和一个布尔值。最后这个布尔值参数如果是true，表示在捕获阶段调用事件处理程序；如果是false,表示在冒泡阶段调用事件处理程序。</p><p>  使用DOM2级方法添加事件处理程序的主要好处是可以添加多个事件处理程序。这些事件会按照添加他们的顺序来触发。</p><p>  通过addEventListener() 添加的事件处理程序智能使用removeEventListener()来移除；移除时传入的参数与添加处理程序时使用的参数相同。这意味v着通过addEventListener() 添加的匿名函数将无法移除。</p><p>  ==大多数情况下，都是将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度地兼容各种浏览器。最好只在需要在事件到达目标之前截获它的时候将事件处理程序添加到捕获阶段。不建议在事件捕获阶段注册事件处理程序==</p><h3 id="IE-事件处理程序"><a href="#IE-事件处理程序" class="headerlink" title="IE 事件处理程序"></a>IE 事件处理程序</h3><p>IE实现了与DOM 中类似的两个方法：attachEvent() 和detachEvent()。这两个方法接受相同的两个参数：事件处理程序名称与事件处理程序函数。<br>由于IE8以及更早版本只支持事件冒泡，所以通过attachEvent() 添加的事件处理程序都会被添加到冒泡阶段。==<strong>注意：</strong>attachEvent()的第一个参数是onclick，而非DOM的addEventListener()方法中的click。==</p><p>在IE中使用attachEvent() 与使用DMO0级方法的主要区别在于事件处理程序的作用域。在使用DOM0级方法情况下，事件处理程序会在其所属元素作用域内运行；在使用attacheEvent()方法的情况下，事件处理程序会在全局作用域中运行，因此 this === window.</p><h3 id="跨浏览器的事件处理程序"><a href="#跨浏览器的事件处理程序" class="headerlink" title="跨浏览器的事件处理程序"></a>跨浏览器的事件处理程序</h3><p>为了浏览器的方式处理事件，不少开发人员会使用能够i有隔离浏览器差异的JavaScript库，还有一些开发人员会自己开发最合适的事件处理的方法。要保证处理事件的代码能在大多数浏览器下一直地运行，只需要关注冒泡阶段。</p><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p> 在触发DOM上的某个事件时，会产生一个事件对象event, 这个对象中包含着所有与事件有关的信息。包括导致事件的元素、事件的类型以及其他特定事件相关的信息。</p><h3 id="DOM中的事件对象"><a href="#DOM中的事件对象" class="headerlink" title="DOM中的事件对象"></a>DOM中的事件对象</h3><p> 兼容DOM的的浏览器会将一个event 对象传入事件处理程序中。无论指定事件处理程序时使用什么方法（DOM0级或DOM2级），都会传入event对象。</p><p> event 对象包含与创建它的特定事件有关的属性和方法。触发的事件类型不一样，可用的属性和方法也不一样。不过所有的事件都会有下表列出的成员</p><table><thead><tr><th>属性/方法</th><th>类型</th><th>读/写</th><th>说明</th></tr></thead><tbody><tr><td>bubbles</td><td>Boolean</td><td>只读</td><td>表明事件是否冒泡</td></tr><tr><td>cancelable</td><td>Boolean</td><td>只读</td><td>表明是否可以取消事件的默认行为</td></tr><tr><td>currentTarget</td><td>Element</td><td>只读</td><td>其事件处理程序当前正在处理事件的那个元素</td></tr><tr><td>defaultPrevented</td><td>Boolean</td><td>只读</td><td>为true表示已经调用了preventDefault()(DOM3级事件中新增)</td></tr><tr><td>detail</td><td>Integer</td><td>只读</td><td>与事件相关的细节信息</td></tr><tr><td>eventPhase</td><td>Integer</td><td>只读</td><td>调用事件处理程序的阶段：1表示捕获阶段；2表示“处于目标”；3表示冒泡阶段</td></tr><tr><td>preventDefault()</td><td>Function</td><td>只读</td><td>取消事件的默认行为。如果cancelable是true，则可以使用这个方法</td></tr><tr><td>stopImmediatePropagation()</td><td>Function</td><td>只读</td><td>取消事件的进一步捕获或冒泡，同时阻止任何事件处理程序被调用（DOM3级事件中新增）</td></tr><tr><td>stopPropagation()</td><td>Function</td><td>只读</td><td>取消事件的进一步捕获或冒泡。如果bubbles为true，则可以使用这个方法</td></tr><tr><td>target</td><td>Element</td><td>只读</td><td>事件的目标</td></tr><tr><td>trusted</td><td>Boolean</td><td>只读</td><td>为true表示事件是浏览器生成的。为false表示事件由开发人员通过JavaScript创建的（DOM3级事件中新增）</td></tr><tr><td>type</td><td>String</td><td>只读</td><td>被触发的事件的类型</td></tr><tr><td>view</td><td>Abstraction</td><td>只读</td><td>与时间关联的抽象视图。等同于发生事件的window对象</td></tr></tbody></table><p><strong>注意</strong></p><ol><li>在事件处理程序内部，对象this始终等于 currentTarget的值，而target则只包含事件的实际目标。</li><li>在需要通过一个函数处理多个事件的时候 可以使用 <code>event.type</code> 判断是何种类型。</li><li>要阻止特定事件的默认行为，可以使用preventDefault()方法。只有cancelable属性设置为true的事件才能使用。</li><li>stopPropagation()　方法用于立即停止事件在DOM层次中的传播，即取消进一步的事件捕获或冒泡。</li><li>事件对象的eventPhase属性，可以用来确定事件流的哪个阶段。</li><li>只有在事件处理程序执行期间，event对象才会存在；一旦事件处理程序执行完成，event对象就会被销毁。 <h3 id="IE中的事件对象"><a href="#IE中的事件对象" class="headerlink" title="IE中的事件对象"></a>IE中的事件对象</h3>与访问DOM的event对象不同，要访问IE中的event对象有几种不同的方式，取决于指定事件处理程序的发方法，在使用DOM0级方法添加事件处理程序时，event对象作为window对象的一个属性存在</li></ol><p>IE的event对象同样也包含与创建它的事件相关的属性和方法。其中很多属性和方法都有对应的或者相关的DOM属性和方法。与DOM的event 对象一样，这些属性和方法也会因为事件类型不同而不同，但所有事件对象都会包含下表的属性和方法。</p><table><thead><tr><th>属性/方法</th><th>类型</th><th>读/写</th><th>说明</th></tr></thead><tbody><tr><td>cancelable</td><td>Boolean</td><td>只读</td><td>表明是否可以取消事件的默认行为</td></tr><tr><td>returnValue</td><td>Boolean</td><td>只读</td><td>默认值为true，但将其设置为false就可以取消事件的默认行为（与DOM中的preventDefault()方法的作用相同）</td></tr><tr><td>srcElement</td><td>Element</td><td>只读</td><td>事件的目标（与DOM中的target属性相同）</td></tr><tr><td>type</td><td>String</td><td>只读</td><td>被触发的事件的类型</td></tr></tbody></table><p><strong>注意</strong></p><ol><li><p>因为事件处理程序的作用域 是根据指定它的方式来确定的，所以不能认为this会始终等于事件目标。</p></li><li><p>returnValue属性相当于DOM中的preventDefault() 方法，他们的作用都是取消给定事件的默认行为。只要将returnValue设置为false，就可以阻止默认行为。</p></li><li><p>cancelBubble 属性与DOM中的stopPropagation()方法作用相同，都是用来停止事件冒泡的。由于IE不支持事件捕获，因而只能取消事件冒泡；但stopPropagation() 可以同时取消事件冒泡和捕获。</p><h3 id="跨浏览器的事件对象"><a href="#跨浏览器的事件对象" class="headerlink" title="跨浏览器的事件对象"></a>跨浏览器的事件对象</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> EventUtil <span class="token operator">=</span> <span class="token punctuation">{</span> addHandler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 省略代码</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> getEvent<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> event <span class="token operator">?</span> event <span class="token punctuation">:</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿到event对象</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> getTarget<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> event<span class="token punctuation">.</span>target <span class="token operator">||</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿到target</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> preventDefault<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>preventDafult<span class="token punctuation">)</span> <span class="token punctuation">{</span>     event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> removeHandler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 省略代码</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> stopPropagation<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span> <span class="token punctuation">{</span>     event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><p><strong>getEvent()</strong>: 返回event的引用。考虑到IE中事件对象的位置不同，可以使用这个方法来取得event对象，而不必担心指定事件处理程序的方式。在使用这个方法时候，必须假设有一个事件对象传入到事件处理程序中，而且还要把该变量传给这个办法。在兼容DOM的浏览器中event变量只是简单啊的传入和返回。而在IE中，event参数是未定义的{undefined}, 因此就会返回window.event。将这一行代码添加到事件处理程序的开头，就可以确保随时都能够使用event对象，而不必担心用户使用的什么浏览器。</p><p><strong>getTarget()</strong>: 返回事件的目标。在这个方法内部，会检测event对象的target属性，如果存在则返回该属性的值，否则，返回srcElement属性的值</p><p><strong>preventDefault()</strong>: 用于取消事件的默认行为。在传入event对象之后，这个方法会检查是否存在preventDefault()方法，如果存在则调用该方法，不存在则将returnValue设置为false</p><p><strong>stopPropagation()</strong>: 首先尝试使用DOM方法阻止事件流，否则就使用cancelBubble属性。</p><blockquote><p>摘自：《JavaScript高级程序设计》</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器安全</title>
      <link href="2020/11/09/ke-hu-duan-jiao-ben-an-quan/"/>
      <url>2020/11/09/ke-hu-duan-jiao-ben-an-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h1><p>​    前言： 随着互联网的发展，浏览器作为互联网最大的入口。浏览器天生就是一个客户端，如果具备了安全功能，就就可以像安全软件一样对用户上网起到了很好的保护作用。</p><h2 id="1-同源策略"><a href="#1-同源策略" class="headerlink" title="1. 同源策略"></a>1. 同源策略</h2><p>​    <strong>浏览器的同源测略，限制了来自不同源的“document”或脚本，对当前“document”读取或设置某些属性。</strong></p><p>​    浏览器中JavaScript的同源策略（当JavaScript被浏览器认为来自不同源的时候，请求被拒绝）的影响因素有：host（域名或IP地址， 如果是IP地址则看作一个根域名）、子域名、端口、协议。</p><p>​    ==需要注意的是，对于当前页面而言，页面存放JavaScript文件的域并不重要，重要的是加载JavaScript 页面所在的域是什么。==</p><p><strong>例如</strong></p><p>​    a.com 通过<code>&lt;script src="http://b.com/b.js"&gt;&lt;/script&gt;</code>加载了 b.com 上的b.js，但是b.js，是运行在a.com页面中的。因此对于当前打开的页面（a.com页面）来说，b.js的源（Origin）就应该是a.com而非b.com。</p><p>​    在浏览器中，<code>&lt;script&gt; 、&lt;img&gt;、&lt;video&gt;、&lt;audio&gt;、&lt;iframe&gt;、&lt;link&gt;</code>等标签都可以跨域加载资源，而不受同源策略的限制，这些带有<code>src</code>属性的标签每次加载的时候，实际上是浏览器发起了一次GET请求。通过<code>src</code>属性加载的资源，浏览器限制了JavaScript的权限，使其不能读、写返回的内容。</p><p><strong>XMLHttpRequest</strong></p><blockquote><p>​    <code>XMLHttpRequest</code>（XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。<code>XMLHttpRequest</code> 在 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/AJAX">AJAX</a> 编程中被大量使用。</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loadXMLdoc(<span class="token punctuation">'</span>./test.text<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>T1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid black<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loadXMLdoc(<span class="token punctuation">'</span>./test.text<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**  * @desc 发送请求  */</span>  <span class="token keyword">function</span> <span class="token function">loadXMLdoc</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    xmlhttp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 兼容 firefox, opera, ie7, etc</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>      xmlhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 兼容ie5, ie6</span>      xmlhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      xmlhttp<span class="token punctuation">.</span>onreadystatechage <span class="token operator">=</span> state_Change<span class="token punctuation">;</span>      xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"your brower dose not support XMLHTTP"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**  * @desc 请求状态 监听方法  */</span>  <span class="token keyword">function</span> <span class="token function">state_Change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'T1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Problem retrieving data:'</span> <span class="token operator">+</span> xmlhttp<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>​    XMLHttpRequest 受到同源测略的约束， 不能跨域访问资源，在AJAX应用的开发中尤其需要注意这一点。</p><p>​    如果XMLHttpRequest 能够跨域访问资源，则可能会导致一些敏感数据泄露，比如SCRF的token，从而导致发生安全问题。</p><p><strong>CSRF</strong></p><blockquote><p><strong>跨站请求伪造</strong>（英语：Cross-site request forgery），也被称为 <strong>one-click attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>， 是一种挟制用户在当前已登录的Web<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445">应用程序</a>上执行非本意的操作的攻击方法。跟<a href="https://baike.baidu.com/item/%E8%B7%A8%E7%BD%91%E7%AB%99%E8%84%9A%E6%9C%AC/23316003">跨网站脚本</a>（XSS）相比，<strong>XSS</strong> 利用的是用户对指定网站的信任，CSRF 利用的是<a href="https://baike.baidu.com/item/%E7%BD%91%E7%AB%99/155722">网站</a>对用户网页浏览器的信任。</p></blockquote><p>​    但是互联网是开放的，随着业务的发展，跨域请求的需求越来越迫切，一次W3C 制定了XMLHttpRequest 跨域访问标准。它需要通过目标域返回的HTTP头来授权是否允许跨域访问，因为HTTP头对于JavaScript 来说一般是无法控制的。</p><h2 id="2-浏览器沙箱"><a href="#2-浏览器沙箱" class="headerlink" title="2. 浏览器沙箱"></a>2. 浏览器沙箱</h2><p><strong>挂马</strong></p><p>​    在网页中插入一段恶意代码，利用浏览器漏洞执行任意代码的攻击方式，在黑客圈子里被称为挂马。</p><p>​    挂马是浏览器需要面对的一个主要威胁，浏览器厂商根据挂马的特点研究出一些对抗技术：</p><ol><li><p>结合操作系统提供的保护技术，对抗内存攻击。</p></li><li><p>浏览器的多进程架构，将浏览器的各个功能模块分开，各个浏览器实例分开，当一个进程崩溃的时候不会影响到其他进程。</p><p><strong>Google Chrome</strong> 是第一个采取多进程架构的浏览器，其主要进程分为： 浏览器进程、渲染进程、插件进程、扩展进程、。插件进程如 flash、java、pdf等与浏览器进程严格隔离，因此不会相互影响。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/guozhitao-theo/bolg_img/2020-11-01/google.png"></p><p>渲染引擎有SandBox隔离，网页代码要与浏览器内核进程通信、与操作系统通信都需要IPC channel, 在其中会进行一些安全检查。</p><p><strong>IPC</strong></p><blockquote><p>IPC（Inter-Process Communication，<a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/1235923">进程间通信</a>）。</p></blockquote><p><strong>Sandbox</strong></p><blockquote><p>Sandbox 即沙箱，计算机技术发展到今天，Sandbox已经成为泛指“资源隔离类模块”的代名词。Sandbox的设计目的一般是为了让不可信任的代码运行在一定的环境中，限制不可信任的代码访问隔离区之外的资源。如果一定要跨越Sandbox边界产生数据交换，则只能通过指定的数据通道，比如经过封装的API来完成，在这些API中会严格检查请求的合法性</p></blockquote><p>​    Goole Chrome 实现了一个相对完整的 Sansbox;</p><p><img src="https://cdn.jsdelivr.net/gh/guozhitao-theo/bolg_img/2020-11-01/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201110221605.png"></p><p>​    多进程架构的好处是，每一个Tab页都是一个单独的进程，所以当一个页面崩溃的时候整个浏览器不会崩溃。</p><p>​    但是 浏览器安全是一个整体，虽然有多进程和Sandbox的保护，但是浏览器所加载的一些第三方插件往往不受Sandbox管辖。</p><h2 id="3-恶意网址拦截"><a href="#3-恶意网址拦截" class="headerlink" title="3. 恶意网址拦截"></a>3. 恶意网址拦截</h2><p><strong>恶意网址拦截原理：</strong> 浏览器周期性地从服务其获取一份最新的恶意网址“黑名单”，如果用户上网访问的网址存在于此黑名单中，浏览器就会弹出一个警告页面。</p><p>​    常见的恶意网站分两类：</p><pre><code>      1. 挂马网站，这些网站通常包含有恶意的脚本如JavaScript或Flash，通过浏览器的漏洞（包括一些插件、控件漏洞）执行shellcode，在用户电脑中植入木马；      2. 钓鱼网站，通过模仿知名网站的相似页面来欺骗用户。</code></pre><p><strong>EV SSL</strong></p><blockquote><p>EV SSL，也称EV SSL证书，英文全名为：Extended Validation SSL Certificate，就是全球领先的数字证书颁发机构和主流的浏览器开发商共同制定的一个新的SSL证书严格身份验证标准，让新一代安全浏览器(如：IE7)能识别出 EV SSL 而在地址栏显示为绿色，让普通消费者能确信正在访问的网站就是通过权威第三方严格身份验证的现实世界的真实实体，从而增强消费者信心，促成更多在线交易。</p></blockquote><p>除了恶意网址黑名单拦截之外，主流浏览器都开始支持EV SSL证书以增强对安全网站的识别。</p><blockquote><p>摘自：《白帽子讲web安全》</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全, 浏览器安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新建一个hexo博客</title>
      <link href="2020/11/01/xin-jian-yi-ge-hexo-bo-ke/"/>
      <url>2020/11/01/xin-jian-yi-ge-hexo-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js执行机制</title>
      <link href="2020/11/01/js-zhi-xing-ji-zhi/"/>
      <url>2020/11/01/js-zhi-xing-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><h1 id="js的运行机制"><a href="#js的运行机制" class="headerlink" title="js的运行机制"></a>js的运行机制</h1><h2 id="JavaScript为什么是单线程的"><a href="#JavaScript为什么是单线程的" class="headerlink" title="JavaScript为什么是单线程的?"></a>JavaScript为什么是单线程的?</h2><p>因为现在如果有两个任务一个是删除DOM节点，一个是增加DOM节点，浏览器该如何执行？所以JavaScript是单线程</p><h2 id="为什么需要异步"><a href="#为什么需要异步" class="headerlink" title="为什么需要异步?"></a>为什么需要异步?</h2><p>如果JavaScript中不存在异步,由于它是单线程只能自上而下执行,如果上一行解析时间很长,那么下面的代码就会被阻塞，不向下执行。<br> 页面出来，用户看到觉得是“卡死了”，所以需要异步。</p><h2 id="JavaScript单线程又是如何实现异步的呢"><a href="#JavaScript单线程又是如何实现异步的呢" class="headerlink" title="JavaScript单线程又是如何实现异步的呢?"></a>JavaScript单线程又是如何实现异步的呢?</h2><p>是通过的事件循环(event loop)实现异步的。</p><p><img src="https://img-blog.csdnimg.cn/20191102110300632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Njk4MTYx,size_16,color_FFFFFF,t_70" alt="avatar"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span>www<span class="token punctuation">.</span>javascript<span class="token punctuation">.</span>com<span class="token punctuation">,</span>    data<span class="token punctuation">:</span>data<span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发送成功!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'代码执行结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>ajax进入Event Table，注册回调函数success。</li><li>执行console.log(‘代码执行结束’)。</li><li>ajax事件完成，回调函数success进入Event Queue。</li><li>主线程从Event Queue读取回调函数success并执行。</li></ul><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">calculationS</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>duration<span class="token operator">/</span><span class="token number">1000</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> s`</span></span><span class="token punctuation">}</span><span class="token keyword">let</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> endTime <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  endTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout的执行时间： '</span> <span class="token operator">+</span>  <span class="token function">calculationS</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"先执行这个"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    写一个函数 让他 在主线程多花点时间</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token number">-2</span><span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">=</span> i  <span class="token operator">+</span> j <span class="token operator">+</span> sum <span class="token operator">+</span> k           <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主线程的执行时间</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主线程的执行时间： '</span> <span class="token operator">+</span> <span class="token function">calculationS</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>setTimeout()进入Event Table并注册,计时开始。</li><li>执行sum函数，很慢，非常慢，计时仍在继续。</li><li>0.3秒到了，计时事件timeout完成，setTimeout内的代码进入event loop但是sum也太慢了吧，还没执行完，只好等着。</li><li>sum终于执行完了，setTimeout内的代码终于从Event Queue进入了主线程执行</li></ul><p><img src="https://img-blog.csdnimg.cn/20200920162327599.png#pic_center" alt="在这里插入图片描述"></p><p><strong>可以看到主线程 跟 setTimeout 的执行时间 相差仅仅0.001s，而我们的延时器setTimeout的延时设置的0.3s，由此可以看出 setTimeout在进入 Event Table的时候便开始计时，计时结束之后便被推入Event Queue中，此时如果主线程为空就会立即执行，若不为空则等待主线程任务执行完毕之后才执行</strong></p><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>setInterval会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">calculationS</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>duration<span class="token operator">/</span><span class="token number">1000</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> s`</span></span><span class="token punctuation">}</span><span class="token keyword">let</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> endTime <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> duration <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  endTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setInterval的执行时间： '</span> <span class="token operator">+</span>  <span class="token function">calculationS</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"先执行这个"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    写一个函数 让他 在主线程多花点时间</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token number">-2</span><span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">=</span> i  <span class="token operator">+</span> j <span class="token operator">+</span> sum <span class="token operator">+</span> k           <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主线程的执行时间</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主线程的执行时间： '</span> <span class="token operator">+</span> <span class="token function">calculationS</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200920162344148.png#pic_center" alt="在这里插入图片描述"></p><p>唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了，<strong>并不是意味着同时执行两次，而是说 代码执行的时间 大于定时器的时间，所以定时器实际时间间隔会大于设定的值</strong>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">calculationS</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>duration<span class="token operator">/</span><span class="token number">1000</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> s`</span></span><span class="token punctuation">}</span><span class="token keyword">let</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> endTime <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> duration <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  endTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setInterval的执行时间： '</span> <span class="token operator">+</span>  <span class="token function">calculationS</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"先执行这个"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    写一个函数 让他 在主线程多花点时间</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token number">-2</span><span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">=</span> i  <span class="token operator">+</span> j <span class="token operator">+</span> sum <span class="token operator">+</span> k           <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主线程的执行时间</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主线程的执行时间： '</span> <span class="token operator">+</span> <span class="token function">calculationS</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200920162405392.png#pic_center" alt="在这里插入图片描述"></p><h2 id="promise、-process-nextTick-callback-、setImmediate（）-功能："><a href="#promise、-process-nextTick-callback-、setImmediate（）-功能：" class="headerlink" title="promise、**process.nextTick(callback)**、setImmediate（）: 功能："></a>promise、**process.nextTick(callback)**、setImmediate（）: 功能：</h2><p><strong>process.nextTick(callback):</strong> 在事件循环的下一次循环中调用 callback 回调函数。效果是将一个函数推迟到代码书写的下一个<strong>同步方法执行完毕时</strong>或<strong>异步方法的事件回调函数开始执行时</strong>。</p><p><strong>process.nextTick</strong>方法可以在当前”执行栈”的尾部==下一次Event Loop（主线程读取”任务队列”）之前==触发回调函数。也就是说，<strong>它指定的任务总是发生在所有异步任务之前</strong>。</p><p><strong>setImmediate</strong>方法则是在当前”任务队列”的尾部添加事件，也就是说，<strong>它指定的任务总是在下一次Event Loop时执行</strong>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>==奇怪的<strong>setImmediate</strong>==</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这段代码的执行结果可能是这样的：</p><p><img src="https://img-blog.csdnimg.cn/20200920162449125.png#pic_center" alt="在这里插入图片描述"></p><p>也有可能是这样的：</p><p><img src="https://img-blog.csdnimg.cn/20200920162519120.png#pic_center" alt="在这里插入图片描述"></p><p>仅为猜测： </p><p>​    第一种情况： setImmediate 最后执行，优先执行 setTimeout</p><p>​    第二种情况：当前执行状态正在 最后一个异步任务 故 setImmediate 执行，第二轮的时候才执行 setTimeout 和 setImmediateB</p><p>**[nodeJs setImmediate 源码]**（<a href="https://cloud.tencent.com/developer/article/1404691">https://cloud.tencent.com/developer/article/1404691</a>)</p><h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><ul><li>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval；setImmediate ()==只有一个的时候永远最后执行，多个的时候每次循环只执行一个==</li><li>micro-task(微任务)：Promise的回调，process.nextTick() ==永远最先执行，存在多个的时候先进先出==；</li></ul><p><strong>单个setImmediate：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200920162539679.png#pic_center" alt="在这里插入图片描述"></p><ol><li>setTimeout异步任务 进入event table</li><li>setImmediate 异步任务 进入 event table</li><li>process.nextTick 异步任务 进入 event table</li><li>promise 同步任务执行 console.log(3), then回调异步任务 进入event</li><li>此时同步任务执行完毕，优先执行 微任务 process.nextTick 该任务被推入 event loop ，经判断 主线程为空，则进入主线程执行</li><li>then()回调函数 为微任务 等待 process.nextTick 结束 执行</li><li>执行宏任务 setTimeout</li><li>setImmediate 最后执行</li></ol><p><strong>多个setImmediate：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200920162552697.png#pic_center" alt="在这里插入图片描述"></p><ol><li>setTimeout宏任务进入 event table 记作<strong>setTimeout1</strong></li><li>setImmediate 微任务 进入 event table 记作<strong>setImmediate1</strong></li><li>process.nextTick 微任务 进入 event table 记作 <strong>process1</strong> </li><li>promise 执行console.log(3) then()回调 微任务 进入 event table记作 <strong>promise1</strong></li><li>setImmediate 微任务 进入 event table 记作<strong>setImmediate2</strong></li></ol><p><strong>event table:</strong> </p><table><thead><tr><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td><strong>setTimeout1</strong></td><td><strong>setImmediate1</strong></td></tr><tr><td></td><td><strong>process1</strong></td></tr><tr><td></td><td><strong>promise1</strong></td></tr><tr><td></td><td><strong>setImmediate2</strong></td></tr></tbody></table><p>==第一轮的执行 结果为 3 进入第二轮==</p><ol><li>process.nextTick 在第一轮执行过程中已经 存在 event table了，由于它在循环开始执行，故优先执行 <strong>process1</strong><ol><li>setImmediate 微任务进入 event table记作<strong>setImmediate3</strong></li><li>执行 console.log(2)</li></ol></li><li>执行当前event table中的 微任务 <strong>promise1</strong>的then()回调函数console.log(4)</li><li>执行当前 event table中的 宏任务 <strong>setTimeout1</strong><ol><li>执行 console.log(‘setTimeout’)</li><li>setImmediate 进入event lable 记作<strong>setImmediate 4</strong></li></ol></li><li>setImmediate最后执行 故 执行<strong>setImmediate1</strong><ol><li>执行console.log(1)</li><li>setImmediate 进入event lable 记作 <strong>setImmediate 5</strong></li></ol></li><li>event table 中还有   <strong>setImmediate2</strong> 执行 console.log(5)</li></ol><p><strong>event tabel:</strong></p><table><thead><tr><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td></td><td><strong>setImmediate3</strong></td></tr><tr><td></td><td><strong>setImmediate 4</strong></td></tr><tr><td></td><td><strong>setImmediate 5</strong></td></tr></tbody></table><p>==第二轮 执行结束 结果为： 2 4 setTimeout 1 5; 进入第三轮==</p><ol><li>执行 <strong>setImmediate3</strong> 中 console.log(6)</li><li>执行 <strong>setImmediate4</strong> 中 console.log(9)</li><li>执行 <strong>setImmediate5</strong> 中 console.log(7)</li></ol><p>==第三轮 的执行结果为 6 9 7 至此 该程序执行完毕==</p><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。</p><p>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fvuq2KG5-1600590065788)(C:\Users\郭治涛\Desktop\tassk.jpg)]</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>第一轮事件循环流程分析如下：</p><ul><li>整体script作为第一个宏任务进入主线程，遇到console.log，输出1。</li><li>遇到setTimeout，其回调函数被分发到宏任务Event Table中。我们暂且记为<strong>setTimeout1</strong>。</li><li>遇到process.nextTick()，其回调函数被分发到微任务Event Table中。我们记为<strong>process1</strong>。</li><li>遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Table中。我们记为<strong>then1</strong>。</li><li>又遇到了setTimeout，其回调函数被分发到宏任务Event Table中，我们记为<strong>setTimeout2</strong>。</li></ul><table><thead><tr><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td><strong>setTimeout1</strong></td><td><strong>process1</strong></td></tr><tr><td><strong>setTimeout2</strong></td><td><strong>then1</strong></td></tr></tbody></table><ul><li>上表是第一轮事件循环宏任务结束时各Event Table的情况，此时已经输出了1和7。</li><li>我们发现了process1和then1两个微任务。</li><li>执行process1,输出6。</li><li>执行then1，输出8。</li></ul><p>好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。那么第二轮时间循环从setTimeout1宏任务开始：</p><ul><li>首先输出2。接下来遇到了process.nextTick()，同样将其分发到微任务Event Table中，记为<strong>process2</strong>。new Promise立即执行输出4，then也分发到微任务Event Table中，记为<strong>then2</strong>。</li></ul><table><thead><tr><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td><strong>setTimeout2</strong></td><td><strong>process2</strong></td></tr><tr><td></td><td><strong>then2</strong></td></tr></tbody></table><ul><li>第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。</li><li>输出3。</li><li>输出5。</li><li>第二轮事件循环结束，第二轮输出2，4，3，5。</li><li>第三轮事件循环开始，此时只剩setTimeout2了，执行。</li><li>直接输出9。</li><li>将process.nextTick()分发到微任务Event Table中。记为<strong>process3</strong>。</li><li>直接执行new Promise，输出11。</li><li>将then分发到微任务Event Table中，记为<strong>then3</strong>。</li></ul><table><thead><tr><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td></td><td><strong>process3</strong></td></tr><tr><td></td><td><strong>then3</strong></td></tr></tbody></table><ul><li>第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。</li><li>输出10。</li><li>输出12。</li><li>第三轮事件循环结束，第三轮输出9，11，10，12。</li></ul><p>整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p><strong>js 为解决单线程 任务阻塞 问题 使用了同步和异步任务</strong></p></li><li><p><strong>同步和异步任务 通过 event loop 实现</strong></p></li><li><p><strong>事件循环中 异步任务 又被分为宏任务 和微任务</strong></p></li><li><p><strong>异步任务中的执行顺序如下：</strong></p><p>==A== : 微任务（微任务中 的 process.nextTick()总是优先执行，多个process.nextTick()按顺序执行，其余微任务按顺序执行）</p><p>==B==:  宏任务（宏任务中setImmediate()总是 最后执行 多个setImmediate()按顺序执行，其余宏任务按顺序执行 ）</p><pre class=" language-mermaid"><code class="language-mermaid">graph TD   A --> B</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
