<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>兄弟连Linux笔记</title>
      <link href="2020/12/23/xiong-di-lian-linux-bi-ji/"/>
      <url>2020/12/23/xiong-di-lian-linux-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="兄弟连Linux笔记"><a href="#兄弟连Linux笔记" class="headerlink" title="兄弟连Linux笔记"></a>兄弟连Linux笔记</h1><h2 id="3-1-注意"><a href="#3-1-注意" class="headerlink" title="3.1 注意"></a>3.1 注意</h2><ul><li><p>Linux 严格区分大小写</p></li><li><p>Linux中所有内容以文件形式保存，包括硬件</p><ul><li>硬盘文件是/dev/sd[a-p]</li><li>光盘文件是/dev/sr0等</li></ul></li><li><p>Linux不靠扩展名区分文件类型</p><ul><li>压缩包：”<em>.gz”、”</em>.bz2” “<em>.tar.bz2”、”</em>.tgz”等</li><li>二进制软件包： “.rpm”</li><li>网页文件：”<em>.html”、”</em>.php”</li><li>脚本文件：”*.sh” </li><li>配置问价：”*.conf”</li></ul></li><li><p>Linux所有的存储设备都必须挂载之后用户才能是哦那个，包括硬盘、U盘和光盘</p></li><li><p>Windows下的程序不能直接在Linux中安装和运行</p></li></ul><h2 id="3-2-服务器管理和维护建议"><a href="#3-2-服务器管理和维护建议" class="headerlink" title="3.2 服务器管理和维护建议"></a>3.2 服务器管理和维护建议</h2><h3 id="1-目录及作用"><a href="#1-目录及作用" class="headerlink" title="1. 目录及作用"></a>1. 目录及作用</h3><table><thead><tr><th>目录名</th><th>目录作用</th></tr></thead><tbody><tr><td>/bin/</td><td>存放系统命令的目录，普通用户和超级用户都可以执行。不过放在/bin下的命令在单用户模式下也可以执行</td></tr><tr><td>/sbin/</td><td>保存和系统环境设置相关的命令，只有超级用户可以使用这些命令进行系统环境设置，但是有些命令可以允许普通用户查看</td></tr><tr><td>/usr/bin</td><td>存放系统命令的目录，普通用户和超级用户都可以执行，这些命令和系统执行无关，在单用户模式下不能执行</td></tr><tr><td>/usr/sbin/</td><td>存放根文件系统不必要的系统管理命令，例如多数服务程序。只有超级用户可以使用。大家其实可以注意到Linux的系统，在所有”sbin“目录中保存的命令只有超级用户可以使用，”bin”目录中保存的命令所有用户都能使用</td></tr><tr><td>/boot/</td><td>系统启动目录，保存系统启动相关文件，如内核文件和启动引导程序（grub）文件等</td></tr><tr><td>/dev/</td><td>设备文件保存位置，我们已将说过Linux中的所有内容以文件的形式保存，包括硬件，那么这个目录就是用来保存所有硬件设备文件的</td></tr><tr><td>/etc/</td><td>配置文件保存位置，系统内所有采用默认安装方式（rpm安装）的服务的配置文件全部都保存在这个目录当中，如用户的账户和密码，服务的启动脚本，常用服务的配置文件</td></tr><tr><td>/home/</td><td>普通用户的家目录。建立每个用户时，每个用户要有一个默认登陆位置，这个位置就是这个用户的家目录，所有普通用户的家目录就是在/home下建立一个和用户名相同的目录。如果user1的家目录就是/home/user1</td></tr><tr><td>/lib/</td><td>系统调用函数的库保存位置</td></tr><tr><td>/lost+found/</td><td>当系统意外崩溃或及其意外关机，而产生一些文件碎片放在这里。当系统启动的过程中fsck（file system check）工具会检查这里，并修复已经损坏的文件系统。这个目录只在每个分区中出现，例如/lost+found就是根分区的备份恢复目录，/boot/lost+found/就是/boot分区的备份恢复目录</td></tr><tr><td>/media/</td><td>挂载目录。系统建议是用来挂载媒体设备的，例如软盘和光盘</td></tr><tr><td>/mnt/</td><td>挂载目录。早期Linux中只有这一个挂载目录，并没有细分。现在这个目录系统建议挂载额外设备，如U盘，移动硬盘和其他操作系统分区</td></tr><tr><td>/misc/</td><td>挂载目录。系统建议用来挂载NFS服务的共享目录。只要是一个已经建立的空目录就可以作为挂载点。虽然操作系统准备了三个默认的挂载目录/media、/mnt/、/misc，但是到底在哪个目录中挂载什么设备都可以由管理员自己决定。</td></tr><tr><td>/opt/</td><td>第三方安装的软件保存的位置。这个目录就是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中。不过我更习惯把软件放置到/usr/local/目录中，也就是说/usr/local/目录也可以用来安装软件。</td></tr><tr><td>/proc/</td><td>虚拟文件系统，该目录中的数据并不保存到硬盘当中，而是保存内存当中。主要保存系统的内核，进程，外部设备状态和网络状态灯。如/proc/cpuInfo是保存CPU信息的，/proc/devices是保存设备去顶的列表的，/proc/filesystems是保存文件系统列表的，/proc/net/是保存网络协议的。</td></tr><tr><td>/sys/</td><td>虚拟文件系统。和/proc目录相似，都是保存在内存当中的，主要保存于内核相关信息的</td></tr><tr><td>/root/</td><td>超级用户的家目录。普通用户家目录在”/home“下，超级用户家目录直接在”/“下。</td></tr><tr><td>/srv/</td><td>服务数据目录。一些系统服务启动之后，可以在这个目录中保存所需要的数据</td></tr><tr><td>/tmp/</td><td>临时目录。系统存放临时文件的目录，该目录下所有用户都可以访问和写入。我们建议此目录中不能保存重要数据，最好每次开机都把该目录清空</td></tr><tr><td>/usr/</td><td>系统软件资源目录。注意usr 不是user的缩写，而是”Unix software Resource“的缩写，所以不是存放用户数据，而是存放系统软件资源的目录。系统中安装的软件大多数保存在这里，所以除了/usr/bin/和/usr/sbin/这两个目录，再介绍几个/usr/下的二级目录</td></tr><tr><td>/var/</td><td>动态数据保存位置。主要保存缓存、日志以及软件运行所产生的文件</td></tr></tbody></table><h3 id="2-服务器注意事项"><a href="#2-服务器注意事项" class="headerlink" title="2. 服务器注意事项"></a>2. 服务器注意事项</h3><ul><li>远程服务器不允许关机，只能重启</li><li>重启之前应该关闭服务</li><li>不要在服务器访问高峰运行高负载命令（大文件扫描、大文件压缩复制等）</li><li>远程配置防火墙时候不要把自己提出服务器</li><li>指定合理的密码规范并定期更新</li><li>合理分配权限</li><li>定期备份重要数据和日志</li></ul><h2 id="4-Linux-常用命令"><a href="#4-Linux-常用命令" class="headerlink" title="4. Linux 常用命令"></a>4. Linux 常用命令</h2><h3 id="4-1-文件处理命令"><a href="#4-1-文件处理命令" class="headerlink" title="4.1 文件处理命令"></a>4.1 文件处理命令</h3><h4 id="4-1-1-命令格式与目录处理命令ls"><a href="#4-1-1-命令格式与目录处理命令ls" class="headerlink" title="4.1.1 命令格式与目录处理命令ls"></a>4.1.1 命令格式与目录处理命令ls</h4><p>命令格式： 命令 [-选项] [参数]</p><p>​    例： ls -la /etc</p><p>说明： </p><ol><li><p>个别命令使用不遵循此格式</p></li><li><p>当有多个选项时，可以写在一起</p></li><li><p>简化选项与完场选项 -a 等于 –all</p></li></ol><p><strong>ls</strong></p><pre class=" language-shell"><code class="language-shell">ls // 显示目录ls -a // 查看所有文件，可看到隐藏文件，为了告诉用户不可轻易操纵 .开头的就是隐藏文件ls -l // 长格式显示     -rw-------. 1 root root  1208 12月 23 08:33 anaconda-ks.cfg    文件权限 引用次数 文件所有者 文件所属组 文件的大小（默认字节） 最后一次修改时间 文件名    -rw-r--r--    -: 文件 d: 目录 l: 软连接    r: 读 w: 写 x: 执行    rw- r-- r--    u所有者 g所属组 o其他人ls -ld /etc d: 显示目录本身，而不显示目录下的数据ls -i i: 文件的i节点</code></pre><h4 id="4-1-2-目录处理命令"><a href="#4-1-2-目录处理命令" class="headerlink" title="4.1.2 目录处理命令"></a>4.1.2 目录处理命令</h4><p><strong>mkdir</strong></p><pre class=" language-shell"><code class="language-shell">mkdir /tmp/xiaodianyingmkdir /tmp/japan/boduo // 无法创建需要加参数 -pmkdir -p /tmp/japan/boduo // 递归创建mkdir /tmp/japan/cangjin /temp/japan/longze/  // 同时创建多个目录</code></pre><p><strong>cd</strong>(change directory)</p><pre class=" language-sh"><code class="language-sh">cd 目录名称</code></pre><p><strong>pwd</strong>(print working directory)</p><pre class=" language-shell"><code class="language-shell">pwd // 显示完整目录</code></pre><p><strong>.</strong> 表示当前目录</p><p><strong>..</strong> 表示当前目录的上级目录</p><p><strong>rmdir</strong> (remove empty directory) 删除空目录</p><pre class=" language-shell"><code class="language-shell">rmdir 目录名</code></pre><p><strong>cp</strong> (copy) 复制</p><pre class=" language-shell"><code class="language-shell">cp -rp [原文件或目录] [原文件目录] ... [目标目录]   -r 复制目录 可以更改文件名   -p 保留文件属性</code></pre><p><strong>mv</strong>(move) 剪切、改名</p><pre class=" language-shell"><code class="language-shell">mv [原文件或目录] [目标目录]</code></pre><p><strong>rm</strong>(remove) 删除文件或目录</p><pre class=" language-shell"><code class="language-shell">rm -rf [文件或目录]   -r 删除目录   -f 强制删除</code></pre><h4 id="4-1-3-文件处理命令"><a href="#4-1-3-文件处理命令" class="headerlink" title="4.1.3 文件处理命令"></a>4.1.3 文件处理命令</h4><p><strong>touch</strong> 创建空文件</p><pre class=" language-shell"><code class="language-shell">touch [文件名]</code></pre><p><strong>cat</strong>显示文件内容</p><pre class=" language-shell"><code class="language-shell">cat [文件名]cat -n [文件名] // 查看文件内容 带行号cat </code></pre><p><strong>tac</strong> 与cat一直  反向显示命令 不支持-n</p><p><strong>more</strong> 分页显示文件内容</p><pre class=" language-shell"><code class="language-shell">more [文件名]（空格）或f  翻页（enter）   换行  q或Q       退出</code></pre><p><strong>less 分页显示内容</strong></p><pre class=" language-shell"><code class="language-shell">于more一样但是多了以下命令b 向上翻页上箭头 向上找/搜索内容   ; n next 下一条 p preview 上一条</code></pre><p><strong>head</strong> 显示文件前面几行</p><pre class=" language-shell"><code class="language-shell">head [文件名]-n 指定行数</code></pre><p><strong>tail</strong>显示末尾几行</p><pre class=" language-shell"><code class="language-shell">tail [文件名]-n 指定行数-f 动态显示</code></pre><h4 id="4-1-4-链接命令"><a href="#4-1-4-链接命令" class="headerlink" title="4.1.4 链接命令"></a>4.1.4 链接命令</h4><p><strong>ln</strong>(link) 生成链接文件</p><pre class=" language-shell"><code class="language-shell">ln -s [原文件] [目标文件]   -s 创建软连接（类似windows快捷方式）ln [原文件] [目标文件] // 相当于拷贝cp -p + 同步更新，原文件丢失硬链接也能访问；查看i节点，一个i节点可对应多个文件；不能跨分区；不能针对目录使用</code></pre><h3 id="4-2-权限管理命令"><a href="#4-2-权限管理命令" class="headerlink" title="4.2 权限管理命令"></a>4.2 权限管理命令</h3><h4 id="4-2-1-权限管理命令chmod"><a href="#4-2-1-权限管理命令chmod" class="headerlink" title="4.2.1 权限管理命令chmod"></a>4.2.1 权限管理命令chmod</h4><p><strong>chmod</strong> (change the permissions mode of a file) 改变文件或目录的权限</p><pre class=" language-shell"><code class="language-shell">chmod [{ugoa}{+-=}{rwx}] [文件或目录]    //[{所有者，用户组，其他人，所有人}{增加权限，减少权限，重写权限}{读，写，执行}]      [mode=421] [文件或者目录]      -R 递归修改</code></pre><pre class=" language-shell"><code class="language-shell">file:    r: cat/more/head/tail/less    w: vim    x: script commanddirectory    r: ls    w: touch/mkdir/rmdir/rm    x: cd</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript基础</title>
      <link href="2020/12/02/javascript-ji-chu/"/>
      <url>2020/12/02/javascript-ji-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.bilibili.com/video/BV1Mz4y1Q79G?p=27">javascript 高级</a> 笔记</p></blockquote><h1 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h1><h2 id="执行上下文-1"><a href="#执行上下文-1" class="headerlink" title="执行上下文"></a>执行上下文</h2><ol><li><p>代码分类</p><ul><li>全局代码</li><li>函数代码（局部）</li></ul></li><li><p>全局执行上下文</p><ul><li><p>在执行全局代码前将window确定为全局执行上下文</p></li><li><p>对全局数据进行预处理   变量提升</p><ul><li><p>var 定义的全局变量==&gt; undefined，添加为window的属性。</p></li><li><p>function声明的全局函数==&gt; 赋值（fun）, 添加为window的方法。 同样会提升</p></li><li><p>this ==&gt; 赋值window</p></li><li><p>开始执行全局代码</p></li></ul></li></ul></li><li><p>函数执行上下文</p><ul><li>在调用函数，准备执行函数体之前，创建对应的函数执行上下文对象（虚拟的，存在于栈里面）</li><li>对局部数据进行预处理   函数提升<ul><li>形参变量 ==&gt; 赋值（实参）==&gt; 添加为执行上下文的属性</li><li>argument ==&gt; 赋值(实参列表)， 添加为执行上下文的属性</li><li>var 定义的局部变量==&gt; undefined, 添加为执行上下文的属性</li><li>function声明的函数 ==&gt; 赋值（fun），添加为执行上下文的方法</li><li>this ==&gt; 赋值（调用函数的对象） </li></ul></li></ul></li></ol><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><ol><li>在全局代码执行前，JS引擎就会创建一个栈来存储管理所有的执行上下文对象</li><li>在全局执行上下文（window）确定后，将其添加到栈中（压栈）</li><li>在函数执行上下文创建之后，将其添加到栈中（压栈）</li><li>在当前函数执行完之后，将栈顶的对象移除（弹栈）</li><li>当所有代码执行完之后，栈中只剩window</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>先变量提升，再函数提升</li><li>初始化在所有变量提升之后</li></ol><h1 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ol><li><p>理解</p><ul><li>就是一块“地盘”，一个代码所在的区域。</li><li>它是静态的（相对于全局上下文对象）， 在编写代码的时候就确定了</li></ul></li><li><p>分类</p><ul><li>全局作用域</li><li>函数作用域</li><li>没有块作用域（ES6有了）</li></ul></li><li><p>作用</p><ul><li>隔离变量，不同作用域下同名变量不会有冲突<h2 id="作用域与执行上下文的区别"><a href="#作用域与执行上下文的区别" class="headerlink" title="作用域与执行上下文的区别"></a>作用域与执行上下文的区别</h2></li></ul></li><li><p>区别1</p><ul><li>全局作用域外每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了，而不是在调用时。</li><li>全局执行上下文环境是在全局作用域确定之后，js代码马上执行之前创建</li><li>函数执行上下文环境是在调用函数的时候，函数体代码执行之前创建</li></ul></li><li><p>区别2</p><ul><li>作用域是静态的，只要函数定义好了就一直存在，且不会发生变化</li><li>上下文的环境是动态的，调用函数时创建，函数调用结束时上下文环境就会自动释放</li></ul></li><li><p>联系</p><ul><li>上下文环境（对象）是从属所在的作用域中</li><li>全局上下文环境 ==&gt; 全局作用域</li><li>函数上下文环境 ==&gt; 对应的函数使用域  </li></ul></li></ol><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><ol><li><p>理解</p><ul><li>多个上下级关系的作用域形成的链，他的方向是从下向上的（从内到外）</li><li>查找变量的时候沿着作用域链来查找的</li></ul></li><li><p>查找一个变量的查找规则</p><ul><li>在当前作用域的执行上下文中查找对应的属性如果有直接返回，否则进入2</li><li>在上一级作用域的执行上下文中查找对应的属性，如果有直接返回，否则进入3</li><li>再次执行2的相同操作，直到全局作用域，如果还找不到就抛出找不到的异常<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1></li></ul></li><li><p>如何产生闭包？</p><ul><li>当一个嵌套的内部（子）的内部函数引用了嵌套的外部（父）函数的变量（函数）时，就产生了闭包</li></ul></li><li><p>闭包到底是什么？</p><ul><li>使用chrom调试查看</li><li>理解一：闭包是嵌套的内部函数</li><li>理解二：内部函数包含被引用变量（函数）的对象</li><li>注意：闭包存在于嵌套的内部函数中</li></ul></li><li><p>产生闭包的条件</p><ul><li>函数嵌套</li><li>内部i函数引用了外部函数的数据（变量/函数）</li></ul></li><li><p>注意：</p><ul><li>执行子函数定义就会产生闭包（不用调用子函数）</li></ul></li><li><p>常见的闭包</p><ol><li>将函数作为另一个函数的返回</li><li>将函数作为实参作为另一个函数调用</li></ol></li></ol><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><ol><li>使用函数内部的变量在函数执行完后，仍然存活在内存中（延长了局部变量的生命周期）</li><li>让函数外部可以操作（读写）到函数内部的数据（变量/函数）</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>函数执行完后，函数内部声明的局部变量是否还存在？ 一般不存在，存在于闭包中的变量才可能存在。</li><li>在函数外部能直接访问函数内部的局部变量吗？不能，但是我们可以通过闭包让外部操作它。</li></ol><h2 id="闭包的生命周期"><a href="#闭包的生命周期" class="headerlink" title="闭包的生命周期"></a>闭包的生命周期</h2><ol><li>产生：在嵌套内部函数定义执行完成时就产生了（不是在调用）</li><li>死亡：在嵌套的内部函数成为垃圾对象时</li></ol><h2 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h2><ol><li>定义JS模块<ul><li>具有特定功能的JS文件</li><li>将所有的数据和功能都封装在一个函数内部（私有的）</li><li>只向外暴露一个包含n个方法的对象和函数</li><li>模块的使用者，只需要通过模块暴露的对象调用方法来实现对应的功能<h2 id="闭包的缺点"><a href="#闭包的缺点" class="headerlink" title="闭包的缺点"></a>闭包的缺点</h2><ul><li>函数执行完毕之后，函数内部的局部变量没有释放，占用内存的时间变长。</li><li>容易造成内存泄漏</li><li>*解决**</li><li>能不用闭包就不用</li><li>及时释放</li></ul></li></ul></li></ol><h2 id="内存溢出与内存泄漏"><a href="#内存溢出与内存泄漏" class="headerlink" title="内存溢出与内存泄漏"></a>内存溢出与内存泄漏</h2><ol><li>内存溢出<ol><li>一种程序运行出现的错误</li><li>当程序运行的内存超过了剩余的内存时，就抛出内存溢出的错误</li></ol></li><li>内存泄漏<ol><li>占用的内存没有及时释放</li><li>内存泄漏积累多了就会导致内存溢出</li><li>常见的内存泄漏<ul><li>意外的全局变量</li><li>没有及时清理的定时器或回调函数</li><li>闭包</li></ul></li></ol></li></ol><h1 id="继承模式"><a href="#继承模式" class="headerlink" title="继承模式"></a>继承模式</h1><ol><li><p>方式1，原型链的继承</p><ol><li>套路<ul><li>定义父类型构造函数</li><li>给父类型的原型添加方法</li><li>定义子类型的构造函数</li><li>创建父类型的对象赋值给子类型的原型</li><li>将子类原型的结构属性属性设置为子类型</li><li>给子类型原型添加方法</li><li>创建子类型的对象：可以调用父类型的方法</li></ul></li><li>关键<ul><li>子类型的原型为父类型的一个实例对象</li></ul></li></ol></li><li><p>借用构造函数继承（假的）</p><ol><li><p>套路</p><ol><li>定义父类型构造函数</li><li>定义子类型构造函数</li><li>在子类型构造函数中间调用父类型构造函数</li></ol></li><li><p>关键：</p><ol><li>在子类型构造函数中通过call()调用父类型构造函数</li></ol></li><li><p>组合继承</p></li><li><p>原型链+借用构造函数的组合继承</p><ol><li>利用原型链实现对父类型方法的继承</li><li>利用super()借用父类型构造函数初始化相同的属性</li></ol></li></ol></li></ol><h1 id="线程机制与事件机制"><a href="#线程机制与事件机制" class="headerlink" title="线程机制与事件机制"></a>线程机制与事件机制</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>   <strong>进程：</strong>　程序的一次执行，它占有一片独有的内存空间。　可以通过windows任务管理器查看进程<br>   <strong>线程：</strong> </p><ul><li><p>是进程内的一个独立执行单元</p></li><li><p>是程序执行的一个完整流程</p></li><li><p>是cpu的最小调度单位</p></li><li><p>*相关知识：**</p></li><li><p>应用程序必须运行在某个进程的某个线程上</p></li><li><p>一个进程中至少有一个运行的线程： 主线程，进程启动之后自动创建</p></li><li><p>一个进程中也可以同时运行多个线程，我们会说程序是多线程运行的</p></li><li><p>一个进程内的数据可以供其中的多个线程直接共享</p></li><li><p>多个进程之间的数据不能直接进行共享的</p></li><li><p>线程池（thread pool）: 保存多个线程对象的容器，实现线程对象的反复利用<br>　　<br><strong>相关问题：</strong></p><ul><li>何为多进程程与多线程</li><li>多进程运行： 一个应用程序可以同时启动多个实例运行</li><li>多线程： 在一个进程内，同时有多个线程运行</li><li>比较单线程和多线程<ol><li>多线程<ol><li>优点：<ul><li>能有效提升cpu的利用率</li></ul></li><li>缺点：<ul><li>创建多线程开销</li><li>线程之间切换开销</li><li>死锁与状态同步问题</li></ul></li></ol></li><li>单线程<ol><li>优点：<ul><li>顺序编程简单易懂</li></ul></li><li>缺点：<ul><li>效率低<h2 id="js-是单线程还是多线程"><a href="#js-是单线程还是多线程" class="headerlink" title="js 是单线程还是多线程"></a>js 是单线程还是多线程</h2></li></ul></li></ol></li></ol></li></ul></li><li><p>js是单线程运行</p></li><li><p>但使用H5中的 Web Workers可以多线程运行</p><h2 id="浏览器运行是单线程还是多线程？"><a href="#浏览器运行是单线程还是多线程？" class="headerlink" title="浏览器运行是单线程还是多线程？"></a>浏览器运行是单线程还是多线程？</h2></li><li><p>都是多线程运行的</p><h2 id="浏览器是单进程还是多进程？"><a href="#浏览器是单进程还是多进程？" class="headerlink" title="浏览器是单进程还是多进程？"></a>浏览器是单进程还是多进程？</h2></li><li><p>有的是单进程的</p><ul><li>firefox</li><li>老版IE</li></ul></li><li><p>有的是多线程的</p><ul><li>chrome</li><li>新版IE</li></ul></li><li><p>如何查看浏览器是否是多进程运行呢？</p><ul><li>任务管理器 </li></ul></li></ul><h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><p> 支持浏览器运行的最核心的程序<br> 不同浏览器可能不一样</p><ul><li>Chrome, Safari: webkit</li><li>firefox: Gecko</li><li>IE: Trident</li><li>360,搜狗等国内浏览器： Trident + webkit<h3 id="内核由很多模块组成"><a href="#内核由很多模块组成" class="headerlink" title="内核由很多模块组成"></a>内核由很多模块组成</h3>== 主线程 ==</li><li>js引擎模块： 负责js程序的编译和运行</li><li>Html、css文档解析模块： 负责页面文本的解析</li><li>DOM/CSS模块： 负责dom/css在内存中间的相关处理</li><li>布局和渲染模块: 负责页面的布局效果的绘制（内存中的对象）<br>== 分线程 ==</li><li>定时器模块：负责定时器的管理</li><li>DOM事件响应模块： 负责事件的管理</li><li>网络请求模块： 负责ajax请求<h2 id="Web-workers"><a href="#Web-workers" class="headerlink" title="Web workers"></a>Web workers</h2><ol><li>H5 规范提供了js分线程实现，取名为Web Workers</li><li>相关API</li><li>Worker：构造函数，加载分线程执行的js文件</li><li>Woker.prototype.onmessage: 用于接收另一个线程的回调函数</li><li>Worker.prototype.postMessage: 向另一个线程发送消息</li><li>不足</li><li>Worker代码不能操作DOM(更新UI)</li><li>不能跨域加载JS</li><li>不是每个浏览器都支持这个新特性</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典三大排序</title>
      <link href="2020/11/29/jing-dian-san-da-pai-xu/"/>
      <url>2020/11/29/jing-dian-san-da-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/42541704">三大经典排序 | 冒泡排序，选择排序，快速排序</a></p></blockquote><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>直接上偷来的图<br><img src="https://pic4.zhimg.com/v2-33a947c71ad62b254cab62e5364d2813_b.webp" alt="冒泡排序"></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhitao-theo/bolg_img/2020-11-01/v2-1c7e20f306ddc02eb4e3a50fa7817ff4_b.gif"></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p><a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html">快速排序（Quicksort）的Javascript实现</a></p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @file 快速排序和冒泡排序 * @author 郭治涛 * @date 2020/11/29 */</span> <span class="token comment" spellcheck="true">/**  * @desc 冒泡排序 时间复杂度O(n^2)  * @param {Array} arr 要排序的数组      */</span><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请输入正确的类型'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @desc 选择排序法 时间复杂度O(n^2) * @param {Array} arr  */</span><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请输入正确的类型'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @desc 快速排序 时间复杂度 O(nlogn) * @param {Array} arr 被排序的数组 * 1. 随机选择一个基准，小于这个基准的值放在左边，大于的值放在右边 * 2. 将基准 左右两边分作两个子集 * 3. 将每个子集连接重复第一步操作 */</span><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请输入正确的类型'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> pivotIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// let pivot = arr[pivotIndex]; 若不将其从原数组中删除则 无法判断 数组元素重复的情况。</span>  <span class="token keyword">let</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pivotIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// } else if (arr[i] > pivot){</span>    <span class="token comment" spellcheck="true">//   right.push(arr[i]);</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span>  <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** [ 1, 2, 2, 4, 5, 6, 9, 21 ]* [ 1, 2, 2, 4, 5, 6, 9, 21 ]* [ 1, 2, 2, 4, 5, 6, 9, 21 ]*/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件</title>
      <link href="2020/11/14/shi-jian/"/>
      <url>2020/11/14/shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>当浏览器发展到第四代的时候，浏览器开发团队遇到了一个问题：页面的哪一部分会拥有某个特定的事件？一组同心圆，手指指向圆心，手指指向的 不是一个圆，而是纸上的所有圆。如果你单击了某个按钮，他们都认为单机事件不仅仅发生在按钮上。换句话说，在单机按钮的同时，你也单击了按钮的容器元素，甚至单击了整个页面。</p><p><strong>事件流</strong> 描述的就是从页面中接收事件的顺序。</p><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p> IE的事件流叫做事件冒泡， 即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。</p><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该是最后接收到事件。事件捕获的用意在于在事件到达预定目标之前捕获它。</p><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>“DOM2级事件流”规定的事件流包括三个阶段： </p><ol><li>事件捕获阶段：为截获事件提供了机会。</li><li>处于目标阶段：实际的目标接收到事件。</li><li>事件冒泡阶段：在这个阶段对事件做出响应。   </li></ol><h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><p>事件就是用户或浏览器自身执行的某种动作。诸如 click、load和mouseover ，都是事件名字。而响应某个事件的函数就叫做事件处理程序（或事件侦听器）</p><h3 id="HTML事件处理程序"><a href="#HTML事件处理程序" class="headerlink" title="HTML事件处理程序"></a>HTML事件处理程序</h3><p>某个元素咫尺的每种事件，都可以使用一个与相应事件处理程序同名的HTML特性来指定。这个特性的值应该是能够执行JavaScript代码。</p><p>事件处理程序中的代码在执行的时候，有权访问全局作用域中的任何代码。这样会创建一个封装着元素属性值的函数，这个函数中有一个局部变量event,也就是事件对象。</p><p>通过event变量，可以直接访问事件对象，你不用自己定义它，也不用从函数的参数列表中国读取。在这个函数内部，this值等于事件的目标元素。</p><h4 id="HTML-事件指定处理程序的缺点"><a href="#HTML-事件指定处理程序的缺点" class="headerlink" title="HTML 事件指定处理程序的缺点"></a>HTML 事件指定处理程序的缺点</h4><ol><li>时差问题，当html刚好渲染完成，js还没有解析的时候，用户触发了某个事件，可能没有执行的处理程序还没加载完成，此时就会报错。</li><li>扩展事件处理程序的作用域链在不同的浏览器中会导致不同的结果，很可能会在访问非限定对象成员时出错。</li><li>HTML 与JavaScript 代码紧密耦合。</li></ol><h3 id="DOM0级事件处理程序"><a href="#DOM0级事件处理程序" class="headerlink" title="DOM0级事件处理程序"></a>DOM0级事件处理程序</h3><p>  通过javaScript 指定事件处理程序的传统方式，就是将一个函数赋值给一个事件处理程序属性。这种为事件处理程序的方法是在第四代 web浏览器中出现。这种方式现在也还支持，原因一是简单，二是具有跨浏览器的优势。==要使用JavaScript指定事件处理程序，首先必须取得一个要操作的对象的引用。== </p><h3 id="DOM2级事件处理程序"><a href="#DOM2级事件处理程序" class="headerlink" title="DOM2级事件处理程序"></a>DOM2级事件处理程序</h3><p>  “DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：addEvenListener() 和removeEventListener()。所有DOM节点中都包含这两个方法，并且他们都接受3个参数：要处理的事件名、作为事件处理的函数和一个布尔值。最后这个布尔值参数如果是true，表示在捕获阶段调用事件处理程序；如果是false,表示在冒泡阶段调用事件处理程序。</p><p>  使用DOM2级方法添加事件处理程序的主要好处是可以添加多个事件处理程序。这些事件会按照添加他们的顺序来触发。</p><p>  通过addEventListener() 添加的事件处理程序智能使用removeEventListener()来移除；移除时传入的参数与添加处理程序时使用的参数相同。这意味v着通过addEventListener() 添加的匿名函数将无法移除。</p><p>  ==大多数情况下，都是将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度地兼容各种浏览器。最好只在需要在事件到达目标之前截获它的时候将事件处理程序添加到捕获阶段。不建议在事件捕获阶段注册事件处理程序==</p><h3 id="IE-事件处理程序"><a href="#IE-事件处理程序" class="headerlink" title="IE 事件处理程序"></a>IE 事件处理程序</h3><p>IE实现了与DOM 中类似的两个方法：attachEvent() 和detachEvent()。这两个方法接受相同的两个参数：事件处理程序名称与事件处理程序函数。<br>由于IE8以及更早版本只支持事件冒泡，所以通过attachEvent() 添加的事件处理程序都会被添加到冒泡阶段。==<strong>注意：</strong>attachEvent()的第一个参数是onclick，而非DOM的addEventListener()方法中的click。==</p><p>在IE中使用attachEvent() 与使用DMO0级方法的主要区别在于事件处理程序的作用域。在使用DOM0级方法情况下，事件处理程序会在其所属元素作用域内运行；在使用attacheEvent()方法的情况下，事件处理程序会在全局作用域中运行，因此 this === window.</p><h3 id="跨浏览器的事件处理程序"><a href="#跨浏览器的事件处理程序" class="headerlink" title="跨浏览器的事件处理程序"></a>跨浏览器的事件处理程序</h3><p>为了浏览器的方式处理事件，不少开发人员会使用能够i有隔离浏览器差异的JavaScript库，还有一些开发人员会自己开发最合适的事件处理的方法。要保证处理事件的代码能在大多数浏览器下一直地运行，只需要关注冒泡阶段。</p><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p> 在触发DOM上的某个事件时，会产生一个事件对象event, 这个对象中包含着所有与事件有关的信息。包括导致事件的元素、事件的类型以及其他特定事件相关的信息。</p><h3 id="DOM中的事件对象"><a href="#DOM中的事件对象" class="headerlink" title="DOM中的事件对象"></a>DOM中的事件对象</h3><p> 兼容DOM的的浏览器会将一个event 对象传入事件处理程序中。无论指定事件处理程序时使用什么方法（DOM0级或DOM2级），都会传入event对象。</p><p> event 对象包含与创建它的特定事件有关的属性和方法。触发的事件类型不一样，可用的属性和方法也不一样。不过所有的事件都会有下表列出的成员</p><table><thead><tr><th>属性/方法</th><th>类型</th><th>读/写</th><th>说明</th></tr></thead><tbody><tr><td>bubbles</td><td>Boolean</td><td>只读</td><td>表明事件是否冒泡</td></tr><tr><td>cancelable</td><td>Boolean</td><td>只读</td><td>表明是否可以取消事件的默认行为</td></tr><tr><td>currentTarget</td><td>Element</td><td>只读</td><td>其事件处理程序当前正在处理事件的那个元素</td></tr><tr><td>defaultPrevented</td><td>Boolean</td><td>只读</td><td>为true表示已经调用了preventDefault()(DOM3级事件中新增)</td></tr><tr><td>detail</td><td>Integer</td><td>只读</td><td>与事件相关的细节信息</td></tr><tr><td>eventPhase</td><td>Integer</td><td>只读</td><td>调用事件处理程序的阶段：1表示捕获阶段；2表示“处于目标”；3表示冒泡阶段</td></tr><tr><td>preventDefault()</td><td>Function</td><td>只读</td><td>取消事件的默认行为。如果cancelable是true，则可以使用这个方法</td></tr><tr><td>stopImmediatePropagation()</td><td>Function</td><td>只读</td><td>取消事件的进一步捕获或冒泡，同时阻止任何事件处理程序被调用（DOM3级事件中新增）</td></tr><tr><td>stopPropagation()</td><td>Function</td><td>只读</td><td>取消事件的进一步捕获或冒泡。如果bubbles为true，则可以使用这个方法</td></tr><tr><td>target</td><td>Element</td><td>只读</td><td>事件的目标</td></tr><tr><td>trusted</td><td>Boolean</td><td>只读</td><td>为true表示事件是浏览器生成的。为false表示事件由开发人员通过JavaScript创建的（DOM3级事件中新增）</td></tr><tr><td>type</td><td>String</td><td>只读</td><td>被触发的事件的类型</td></tr><tr><td>view</td><td>Abstraction</td><td>只读</td><td>与时间关联的抽象视图。等同于发生事件的window对象</td></tr></tbody></table><p><strong>注意</strong></p><ol><li>在事件处理程序内部，对象this始终等于 currentTarget的值，而target则只包含事件的实际目标。</li><li>在需要通过一个函数处理多个事件的时候 可以使用 <code>event.type</code> 判断是何种类型。</li><li>要阻止特定事件的默认行为，可以使用preventDefault()方法。只有cancelable属性设置为true的事件才能使用。</li><li>stopPropagation()　方法用于立即停止事件在DOM层次中的传播，即取消进一步的事件捕获或冒泡。</li><li>事件对象的eventPhase属性，可以用来确定事件流的哪个阶段。</li><li>只有在事件处理程序执行期间，event对象才会存在；一旦事件处理程序执行完成，event对象就会被销毁。 <h3 id="IE中的事件对象"><a href="#IE中的事件对象" class="headerlink" title="IE中的事件对象"></a>IE中的事件对象</h3>与访问DOM的event对象不同，要访问IE中的event对象有几种不同的方式，取决于指定事件处理程序的发方法，在使用DOM0级方法添加事件处理程序时，event对象作为window对象的一个属性存在</li></ol><p>IE的event对象同样也包含与创建它的事件相关的属性和方法。其中很多属性和方法都有对应的或者相关的DOM属性和方法。与DOM的event 对象一样，这些属性和方法也会因为事件类型不同而不同，但所有事件对象都会包含下表的属性和方法。</p><table><thead><tr><th>属性/方法</th><th>类型</th><th>读/写</th><th>说明</th></tr></thead><tbody><tr><td>cancelable</td><td>Boolean</td><td>只读</td><td>表明是否可以取消事件的默认行为</td></tr><tr><td>returnValue</td><td>Boolean</td><td>只读</td><td>默认值为true，但将其设置为false就可以取消事件的默认行为（与DOM中的preventDefault()方法的作用相同）</td></tr><tr><td>srcElement</td><td>Element</td><td>只读</td><td>事件的目标（与DOM中的target属性相同）</td></tr><tr><td>type</td><td>String</td><td>只读</td><td>被触发的事件的类型</td></tr></tbody></table><p><strong>注意</strong></p><ol><li><p>因为事件处理程序的作用域 是根据指定它的方式来确定的，所以不能认为this会始终等于事件目标。</p></li><li><p>returnValue属性相当于DOM中的preventDefault() 方法，他们的作用都是取消给定事件的默认行为。只要将returnValue设置为false，就可以阻止默认行为。</p></li><li><p>cancelBubble 属性与DOM中的stopPropagation()方法作用相同，都是用来停止事件冒泡的。由于IE不支持事件捕获，因而只能取消事件冒泡；但stopPropagation() 可以同时取消事件冒泡和捕获。</p><h3 id="跨浏览器的事件对象"><a href="#跨浏览器的事件对象" class="headerlink" title="跨浏览器的事件对象"></a>跨浏览器的事件对象</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> EventUtil <span class="token operator">=</span> <span class="token punctuation">{</span> addHandler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 省略代码</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> getEvent<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> event <span class="token operator">?</span> event <span class="token punctuation">:</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿到event对象</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> getTarget<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> event<span class="token punctuation">.</span>target <span class="token operator">||</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿到target</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> preventDefault<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>preventDafult<span class="token punctuation">)</span> <span class="token punctuation">{</span>     event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> removeHandler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 省略代码</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> stopPropagation<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span> <span class="token punctuation">{</span>     event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><p><strong>getEvent()</strong>: 返回event的引用。考虑到IE中事件对象的位置不同，可以使用这个方法来取得event对象，而不必担心指定事件处理程序的方式。在使用这个方法时候，必须假设有一个事件对象传入到事件处理程序中，而且还要把该变量传给这个办法。在兼容DOM的浏览器中event变量只是简单啊的传入和返回。而在IE中，event参数是未定义的{undefined}, 因此就会返回window.event。将这一行代码添加到事件处理程序的开头，就可以确保随时都能够使用event对象，而不必担心用户使用的什么浏览器。</p><p><strong>getTarget()</strong>: 返回事件的目标。在这个方法内部，会检测event对象的target属性，如果存在则返回该属性的值，否则，返回srcElement属性的值</p><p><strong>preventDefault()</strong>: 用于取消事件的默认行为。在传入event对象之后，这个方法会检查是否存在preventDefault()方法，如果存在则调用该方法，不存在则将returnValue设置为false</p><p><strong>stopPropagation()</strong>: 首先尝试使用DOM方法阻止事件流，否则就使用cancelBubble属性。</p><blockquote><p>摘自：《JavaScript高级程序设计》</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器安全</title>
      <link href="2020/11/09/ke-hu-duan-jiao-ben-an-quan/"/>
      <url>2020/11/09/ke-hu-duan-jiao-ben-an-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h1><p>​    前言： 随着互联网的发展，浏览器作为互联网最大的入口。浏览器天生就是一个客户端，如果具备了安全功能，就就可以像安全软件一样对用户上网起到了很好的保护作用。</p><h2 id="1-同源策略"><a href="#1-同源策略" class="headerlink" title="1. 同源策略"></a>1. 同源策略</h2><p>​    <strong>浏览器的同源测略，限制了来自不同源的“document”或脚本，对当前“document”读取或设置某些属性。</strong></p><p>​    浏览器中JavaScript的同源策略（当JavaScript被浏览器认为来自不同源的时候，请求被拒绝）的影响因素有：host（域名或IP地址， 如果是IP地址则看作一个根域名）、子域名、端口、协议。</p><p>​    ==需要注意的是，对于当前页面而言，页面存放JavaScript文件的域并不重要，重要的是加载JavaScript 页面所在的域是什么。==</p><p><strong>例如</strong></p><p>​    a.com 通过<code>&lt;script src="http://b.com/b.js"&gt;&lt;/script&gt;</code>加载了 b.com 上的b.js，但是b.js，是运行在a.com页面中的。因此对于当前打开的页面（a.com页面）来说，b.js的源（Origin）就应该是a.com而非b.com。</p><p>​    在浏览器中，<code>&lt;script&gt; 、&lt;img&gt;、&lt;video&gt;、&lt;audio&gt;、&lt;iframe&gt;、&lt;link&gt;</code>等标签都可以跨域加载资源，而不受同源策略的限制，这些带有<code>src</code>属性的标签每次加载的时候，实际上是浏览器发起了一次GET请求。通过<code>src</code>属性加载的资源，浏览器限制了JavaScript的权限，使其不能读、写返回的内容。</p><p><strong>XMLHttpRequest</strong></p><blockquote><p>​    <code>XMLHttpRequest</code>（XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。<code>XMLHttpRequest</code> 在 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/AJAX">AJAX</a> 编程中被大量使用。</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loadXMLdoc(<span class="token punctuation">'</span>./test.text<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>T1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid black<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loadXMLdoc(<span class="token punctuation">'</span>./test.text<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**  * @desc 发送请求  */</span>  <span class="token keyword">function</span> <span class="token function">loadXMLdoc</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    xmlhttp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 兼容 firefox, opera, ie7, etc</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>      xmlhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 兼容ie5, ie6</span>      xmlhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      xmlhttp<span class="token punctuation">.</span>onreadystatechage <span class="token operator">=</span> state_Change<span class="token punctuation">;</span>      xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"your brower dose not support XMLHTTP"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**  * @desc 请求状态 监听方法  */</span>  <span class="token keyword">function</span> <span class="token function">state_Change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'T1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Problem retrieving data:'</span> <span class="token operator">+</span> xmlhttp<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>​    XMLHttpRequest 受到同源测略的约束， 不能跨域访问资源，在AJAX应用的开发中尤其需要注意这一点。</p><p>​    如果XMLHttpRequest 能够跨域访问资源，则可能会导致一些敏感数据泄露，比如SCRF的token，从而导致发生安全问题。</p><p><strong>CSRF</strong></p><blockquote><p><strong>跨站请求伪造</strong>（英语：Cross-site request forgery），也被称为 <strong>one-click attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>， 是一种挟制用户在当前已登录的Web<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445">应用程序</a>上执行非本意的操作的攻击方法。跟<a href="https://baike.baidu.com/item/%E8%B7%A8%E7%BD%91%E7%AB%99%E8%84%9A%E6%9C%AC/23316003">跨网站脚本</a>（XSS）相比，<strong>XSS</strong> 利用的是用户对指定网站的信任，CSRF 利用的是<a href="https://baike.baidu.com/item/%E7%BD%91%E7%AB%99/155722">网站</a>对用户网页浏览器的信任。</p></blockquote><p>​    但是互联网是开放的，随着业务的发展，跨域请求的需求越来越迫切，一次W3C 制定了XMLHttpRequest 跨域访问标准。它需要通过目标域返回的HTTP头来授权是否允许跨域访问，因为HTTP头对于JavaScript 来说一般是无法控制的。</p><h2 id="2-浏览器沙箱"><a href="#2-浏览器沙箱" class="headerlink" title="2. 浏览器沙箱"></a>2. 浏览器沙箱</h2><p><strong>挂马</strong></p><p>​    在网页中插入一段恶意代码，利用浏览器漏洞执行任意代码的攻击方式，在黑客圈子里被称为挂马。</p><p>​    挂马是浏览器需要面对的一个主要威胁，浏览器厂商根据挂马的特点研究出一些对抗技术：</p><ol><li><p>结合操作系统提供的保护技术，对抗内存攻击。</p></li><li><p>浏览器的多进程架构，将浏览器的各个功能模块分开，各个浏览器实例分开，当一个进程崩溃的时候不会影响到其他进程。</p><p><strong>Google Chrome</strong> 是第一个采取多进程架构的浏览器，其主要进程分为： 浏览器进程、渲染进程、插件进程、扩展进程、。插件进程如 flash、java、pdf等与浏览器进程严格隔离，因此不会相互影响。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/guozhitao-theo/bolg_img/2020-11-01/google.png"></p><p>渲染引擎有SandBox隔离，网页代码要与浏览器内核进程通信、与操作系统通信都需要IPC channel, 在其中会进行一些安全检查。</p><p><strong>IPC</strong></p><blockquote><p>IPC（Inter-Process Communication，<a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/1235923">进程间通信</a>）。</p></blockquote><p><strong>Sandbox</strong></p><blockquote><p>Sandbox 即沙箱，计算机技术发展到今天，Sandbox已经成为泛指“资源隔离类模块”的代名词。Sandbox的设计目的一般是为了让不可信任的代码运行在一定的环境中，限制不可信任的代码访问隔离区之外的资源。如果一定要跨越Sandbox边界产生数据交换，则只能通过指定的数据通道，比如经过封装的API来完成，在这些API中会严格检查请求的合法性</p></blockquote><p>​    Goole Chrome 实现了一个相对完整的 Sansbox;</p><p><img src="https://cdn.jsdelivr.net/gh/guozhitao-theo/bolg_img/2020-11-01/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201110221605.png"></p><p>​    多进程架构的好处是，每一个Tab页都是一个单独的进程，所以当一个页面崩溃的时候整个浏览器不会崩溃。</p><p>​    但是 浏览器安全是一个整体，虽然有多进程和Sandbox的保护，但是浏览器所加载的一些第三方插件往往不受Sandbox管辖。</p><h2 id="3-恶意网址拦截"><a href="#3-恶意网址拦截" class="headerlink" title="3. 恶意网址拦截"></a>3. 恶意网址拦截</h2><p><strong>恶意网址拦截原理：</strong> 浏览器周期性地从服务其获取一份最新的恶意网址“黑名单”，如果用户上网访问的网址存在于此黑名单中，浏览器就会弹出一个警告页面。</p><p>​    常见的恶意网站分两类：</p><pre><code>      1. 挂马网站，这些网站通常包含有恶意的脚本如JavaScript或Flash，通过浏览器的漏洞（包括一些插件、控件漏洞）执行shellcode，在用户电脑中植入木马；      2. 钓鱼网站，通过模仿知名网站的相似页面来欺骗用户。</code></pre><p><strong>EV SSL</strong></p><blockquote><p>EV SSL，也称EV SSL证书，英文全名为：Extended Validation SSL Certificate，就是全球领先的数字证书颁发机构和主流的浏览器开发商共同制定的一个新的SSL证书严格身份验证标准，让新一代安全浏览器(如：IE7)能识别出 EV SSL 而在地址栏显示为绿色，让普通消费者能确信正在访问的网站就是通过权威第三方严格身份验证的现实世界的真实实体，从而增强消费者信心，促成更多在线交易。</p></blockquote><p>除了恶意网址黑名单拦截之外，主流浏览器都开始支持EV SSL证书以增强对安全网站的识别。</p><blockquote><p>摘自：《白帽子讲web安全》</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全, 浏览器安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新建一个hexo博客</title>
      <link href="2020/11/01/xin-jian-yi-ge-hexo-bo-ke/"/>
      <url>2020/11/01/xin-jian-yi-ge-hexo-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js执行机制</title>
      <link href="2020/11/01/js-zhi-xing-ji-zhi/"/>
      <url>2020/11/01/js-zhi-xing-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><h1 id="js的运行机制"><a href="#js的运行机制" class="headerlink" title="js的运行机制"></a>js的运行机制</h1><h2 id="JavaScript为什么是单线程的"><a href="#JavaScript为什么是单线程的" class="headerlink" title="JavaScript为什么是单线程的?"></a>JavaScript为什么是单线程的?</h2><p>因为现在如果有两个任务一个是删除DOM节点，一个是增加DOM节点，浏览器该如何执行？所以JavaScript是单线程</p><h2 id="为什么需要异步"><a href="#为什么需要异步" class="headerlink" title="为什么需要异步?"></a>为什么需要异步?</h2><p>如果JavaScript中不存在异步,由于它是单线程只能自上而下执行,如果上一行解析时间很长,那么下面的代码就会被阻塞，不向下执行。<br> 页面出来，用户看到觉得是“卡死了”，所以需要异步。</p><h2 id="JavaScript单线程又是如何实现异步的呢"><a href="#JavaScript单线程又是如何实现异步的呢" class="headerlink" title="JavaScript单线程又是如何实现异步的呢?"></a>JavaScript单线程又是如何实现异步的呢?</h2><p>是通过的事件循环(event loop)实现异步的。</p><p><img src="https://img-blog.csdnimg.cn/20191102110300632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Njk4MTYx,size_16,color_FFFFFF,t_70" alt="avatar"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span>www<span class="token punctuation">.</span>javascript<span class="token punctuation">.</span>com<span class="token punctuation">,</span>    data<span class="token punctuation">:</span>data<span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发送成功!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'代码执行结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>ajax进入Event Table，注册回调函数success。</li><li>执行console.log(‘代码执行结束’)。</li><li>ajax事件完成，回调函数success进入Event Queue。</li><li>主线程从Event Queue读取回调函数success并执行。</li></ul><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">calculationS</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>duration<span class="token operator">/</span><span class="token number">1000</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> s`</span></span><span class="token punctuation">}</span><span class="token keyword">let</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> endTime <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  endTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout的执行时间： '</span> <span class="token operator">+</span>  <span class="token function">calculationS</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"先执行这个"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    写一个函数 让他 在主线程多花点时间</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token number">-2</span><span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">=</span> i  <span class="token operator">+</span> j <span class="token operator">+</span> sum <span class="token operator">+</span> k           <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主线程的执行时间</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主线程的执行时间： '</span> <span class="token operator">+</span> <span class="token function">calculationS</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>setTimeout()进入Event Table并注册,计时开始。</li><li>执行sum函数，很慢，非常慢，计时仍在继续。</li><li>0.3秒到了，计时事件timeout完成，setTimeout内的代码进入event loop但是sum也太慢了吧，还没执行完，只好等着。</li><li>sum终于执行完了，setTimeout内的代码终于从Event Queue进入了主线程执行</li></ul><p><img src="https://img-blog.csdnimg.cn/20200920162327599.png#pic_center" alt="在这里插入图片描述"></p><p><strong>可以看到主线程 跟 setTimeout 的执行时间 相差仅仅0.001s，而我们的延时器setTimeout的延时设置的0.3s，由此可以看出 setTimeout在进入 Event Table的时候便开始计时，计时结束之后便被推入Event Queue中，此时如果主线程为空就会立即执行，若不为空则等待主线程任务执行完毕之后才执行</strong></p><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>setInterval会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">calculationS</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>duration<span class="token operator">/</span><span class="token number">1000</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> s`</span></span><span class="token punctuation">}</span><span class="token keyword">let</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> endTime <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> duration <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  endTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setInterval的执行时间： '</span> <span class="token operator">+</span>  <span class="token function">calculationS</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"先执行这个"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    写一个函数 让他 在主线程多花点时间</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token number">-2</span><span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">=</span> i  <span class="token operator">+</span> j <span class="token operator">+</span> sum <span class="token operator">+</span> k           <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主线程的执行时间</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主线程的执行时间： '</span> <span class="token operator">+</span> <span class="token function">calculationS</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200920162344148.png#pic_center" alt="在这里插入图片描述"></p><p>唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了，<strong>并不是意味着同时执行两次，而是说 代码执行的时间 大于定时器的时间，所以定时器实际时间间隔会大于设定的值</strong>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">calculationS</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>duration<span class="token operator">/</span><span class="token number">1000</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> s`</span></span><span class="token punctuation">}</span><span class="token keyword">let</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> endTime <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> duration <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  endTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setInterval的执行时间： '</span> <span class="token operator">+</span>  <span class="token function">calculationS</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"先执行这个"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    写一个函数 让他 在主线程多花点时间</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token number">-2</span><span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">=</span> i  <span class="token operator">+</span> j <span class="token operator">+</span> sum <span class="token operator">+</span> k           <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主线程的执行时间</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主线程的执行时间： '</span> <span class="token operator">+</span> <span class="token function">calculationS</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200920162405392.png#pic_center" alt="在这里插入图片描述"></p><h2 id="promise、-process-nextTick-callback-、setImmediate（）-功能："><a href="#promise、-process-nextTick-callback-、setImmediate（）-功能：" class="headerlink" title="promise、**process.nextTick(callback)**、setImmediate（）: 功能："></a>promise、**process.nextTick(callback)**、setImmediate（）: 功能：</h2><p><strong>process.nextTick(callback):</strong> 在事件循环的下一次循环中调用 callback 回调函数。效果是将一个函数推迟到代码书写的下一个<strong>同步方法执行完毕时</strong>或<strong>异步方法的事件回调函数开始执行时</strong>。</p><p><strong>process.nextTick</strong>方法可以在当前”执行栈”的尾部==下一次Event Loop（主线程读取”任务队列”）之前==触发回调函数。也就是说，<strong>它指定的任务总是发生在所有异步任务之前</strong>。</p><p><strong>setImmediate</strong>方法则是在当前”任务队列”的尾部添加事件，也就是说，<strong>它指定的任务总是在下一次Event Loop时执行</strong>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>==奇怪的<strong>setImmediate</strong>==</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这段代码的执行结果可能是这样的：</p><p><img src="https://img-blog.csdnimg.cn/20200920162449125.png#pic_center" alt="在这里插入图片描述"></p><p>也有可能是这样的：</p><p><img src="https://img-blog.csdnimg.cn/20200920162519120.png#pic_center" alt="在这里插入图片描述"></p><p>仅为猜测： </p><p>​    第一种情况： setImmediate 最后执行，优先执行 setTimeout</p><p>​    第二种情况：当前执行状态正在 最后一个异步任务 故 setImmediate 执行，第二轮的时候才执行 setTimeout 和 setImmediateB</p><p>**[nodeJs setImmediate 源码]**（<a href="https://cloud.tencent.com/developer/article/1404691">https://cloud.tencent.com/developer/article/1404691</a>)</p><h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><ul><li>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval；setImmediate ()==只有一个的时候永远最后执行，多个的时候每次循环只执行一个==</li><li>micro-task(微任务)：Promise的回调，process.nextTick() ==永远最先执行，存在多个的时候先进先出==；</li></ul><p><strong>单个setImmediate：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200920162539679.png#pic_center" alt="在这里插入图片描述"></p><ol><li>setTimeout异步任务 进入event table</li><li>setImmediate 异步任务 进入 event table</li><li>process.nextTick 异步任务 进入 event table</li><li>promise 同步任务执行 console.log(3), then回调异步任务 进入event</li><li>此时同步任务执行完毕，优先执行 微任务 process.nextTick 该任务被推入 event loop ，经判断 主线程为空，则进入主线程执行</li><li>then()回调函数 为微任务 等待 process.nextTick 结束 执行</li><li>执行宏任务 setTimeout</li><li>setImmediate 最后执行</li></ol><p><strong>多个setImmediate：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200920162552697.png#pic_center" alt="在这里插入图片描述"></p><ol><li>setTimeout宏任务进入 event table 记作<strong>setTimeout1</strong></li><li>setImmediate 微任务 进入 event table 记作<strong>setImmediate1</strong></li><li>process.nextTick 微任务 进入 event table 记作 <strong>process1</strong> </li><li>promise 执行console.log(3) then()回调 微任务 进入 event table记作 <strong>promise1</strong></li><li>setImmediate 微任务 进入 event table 记作<strong>setImmediate2</strong></li></ol><p><strong>event table:</strong> </p><table><thead><tr><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td><strong>setTimeout1</strong></td><td><strong>setImmediate1</strong></td></tr><tr><td></td><td><strong>process1</strong></td></tr><tr><td></td><td><strong>promise1</strong></td></tr><tr><td></td><td><strong>setImmediate2</strong></td></tr></tbody></table><p>==第一轮的执行 结果为 3 进入第二轮==</p><ol><li>process.nextTick 在第一轮执行过程中已经 存在 event table了，由于它在循环开始执行，故优先执行 <strong>process1</strong><ol><li>setImmediate 微任务进入 event table记作<strong>setImmediate3</strong></li><li>执行 console.log(2)</li></ol></li><li>执行当前event table中的 微任务 <strong>promise1</strong>的then()回调函数console.log(4)</li><li>执行当前 event table中的 宏任务 <strong>setTimeout1</strong><ol><li>执行 console.log(‘setTimeout’)</li><li>setImmediate 进入event lable 记作<strong>setImmediate 4</strong></li></ol></li><li>setImmediate最后执行 故 执行<strong>setImmediate1</strong><ol><li>执行console.log(1)</li><li>setImmediate 进入event lable 记作 <strong>setImmediate 5</strong></li></ol></li><li>event table 中还有   <strong>setImmediate2</strong> 执行 console.log(5)</li></ol><p><strong>event tabel:</strong></p><table><thead><tr><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td></td><td><strong>setImmediate3</strong></td></tr><tr><td></td><td><strong>setImmediate 4</strong></td></tr><tr><td></td><td><strong>setImmediate 5</strong></td></tr></tbody></table><p>==第二轮 执行结束 结果为： 2 4 setTimeout 1 5; 进入第三轮==</p><ol><li>执行 <strong>setImmediate3</strong> 中 console.log(6)</li><li>执行 <strong>setImmediate4</strong> 中 console.log(9)</li><li>执行 <strong>setImmediate5</strong> 中 console.log(7)</li></ol><p>==第三轮 的执行结果为 6 9 7 至此 该程序执行完毕==</p><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。</p><p>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fvuq2KG5-1600590065788)(C:\Users\郭治涛\Desktop\tassk.jpg)]</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>第一轮事件循环流程分析如下：</p><ul><li>整体script作为第一个宏任务进入主线程，遇到console.log，输出1。</li><li>遇到setTimeout，其回调函数被分发到宏任务Event Table中。我们暂且记为<strong>setTimeout1</strong>。</li><li>遇到process.nextTick()，其回调函数被分发到微任务Event Table中。我们记为<strong>process1</strong>。</li><li>遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Table中。我们记为<strong>then1</strong>。</li><li>又遇到了setTimeout，其回调函数被分发到宏任务Event Table中，我们记为<strong>setTimeout2</strong>。</li></ul><table><thead><tr><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td><strong>setTimeout1</strong></td><td><strong>process1</strong></td></tr><tr><td><strong>setTimeout2</strong></td><td><strong>then1</strong></td></tr></tbody></table><ul><li>上表是第一轮事件循环宏任务结束时各Event Table的情况，此时已经输出了1和7。</li><li>我们发现了process1和then1两个微任务。</li><li>执行process1,输出6。</li><li>执行then1，输出8。</li></ul><p>好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。那么第二轮时间循环从setTimeout1宏任务开始：</p><ul><li>首先输出2。接下来遇到了process.nextTick()，同样将其分发到微任务Event Table中，记为<strong>process2</strong>。new Promise立即执行输出4，then也分发到微任务Event Table中，记为<strong>then2</strong>。</li></ul><table><thead><tr><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td><strong>setTimeout2</strong></td><td><strong>process2</strong></td></tr><tr><td></td><td><strong>then2</strong></td></tr></tbody></table><ul><li>第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。</li><li>输出3。</li><li>输出5。</li><li>第二轮事件循环结束，第二轮输出2，4，3，5。</li><li>第三轮事件循环开始，此时只剩setTimeout2了，执行。</li><li>直接输出9。</li><li>将process.nextTick()分发到微任务Event Table中。记为<strong>process3</strong>。</li><li>直接执行new Promise，输出11。</li><li>将then分发到微任务Event Table中，记为<strong>then3</strong>。</li></ul><table><thead><tr><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td></td><td><strong>process3</strong></td></tr><tr><td></td><td><strong>then3</strong></td></tr></tbody></table><ul><li>第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。</li><li>输出10。</li><li>输出12。</li><li>第三轮事件循环结束，第三轮输出9，11，10，12。</li></ul><p>整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p><strong>js 为解决单线程 任务阻塞 问题 使用了同步和异步任务</strong></p></li><li><p><strong>同步和异步任务 通过 event loop 实现</strong></p></li><li><p><strong>事件循环中 异步任务 又被分为宏任务 和微任务</strong></p></li><li><p><strong>异步任务中的执行顺序如下：</strong></p><p>==A== : 微任务（微任务中 的 process.nextTick()总是优先执行，多个process.nextTick()按顺序执行，其余微任务按顺序执行）</p><p>==B==:  宏任务（宏任务中setImmediate()总是 最后执行 多个setImmediate()按顺序执行，其余宏任务按顺序执行 ）</p><pre class=" language-mermaid"><code class="language-mermaid">graph TD   A --> B</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
